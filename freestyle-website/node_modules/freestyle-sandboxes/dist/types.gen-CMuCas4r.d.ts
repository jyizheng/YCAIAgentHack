type FreestyleCloudstateDeployConfiguration = {
    /**
     * ID of the project to deploy, if not provided will create a new project
     */
    projectId?: (string) | null;
    /**
     * The environment variables that the cloudstate deploy can access
     */
    envVars?: {
        [key: string]: (string);
    };
};
type FreestyleCloudstateDeployErrorResponse = {
    message: string;
};
type FreestyleCloudstateDeployRequest = {
    classes: string;
    config?: FreestyleCloudstateDeployConfiguration;
};
type FreestyleCloudstateDeploySuccessResponse = {
    /**
     * The id of the project deployed to
     */
    projectId: string;
};
type FreestyleDeployWebConfiguration = {
    /**
     * The entrypoint file for the website
     */
    entrypoint?: (string) | null;
    /**
     * The custom domains for the website, eg. [\"subdomain.yourwebsite.com\"]. You may not include *.style.dev domains here, those are reserved for projectIds
     */
    domains?: Array<(string)> | null;
    /**
     * The project id to deploy to, if not provided will create a new project, may be used to provision a new project with a specific id if that id is available
     */
    projectId?: (string) | null;
    /**
     * Node Modules to install for the website, a map of package names to versions, e.g. { \"express\": \"4.17.1\" }. If this and a package-lock.json are provided, the package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock is also provided, the versions here will override the versions in those lock files.
     */
    nodeModules?: {
        [key: string]: (string);
    } | null;
    /**
     * The environment variables that the website can access
     * e.g. { \"RESEND_API_KEY\": \"re_123456789\" }
     */
    envVars?: {
        [key: string]: (string);
    } | null;
};
type FreestyleDeployWebErrorResponse = {
    message: string;
};
type FreestyleDeployWebPayload = {
    /**
     * The files to deploy, a map of file paths to file contents, e.g. { \"index.js\": {\"content\": \"your main\", \"encoding\": \"utf-8\"}, \"file2.js\": {\"content\": \"your helper\" } }
     *
     * **Do not include node modules in this bundle, they will not work**. Instead, includes a package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock, the node modules for the project will be installed from that lock file, or use the node_modules field in the configuration to specify the node modules to install.
     */
    files: {
        [key: string]: FreestyleFile;
    };
    config?: FreestyleDeployWebConfiguration;
};
type FreestyleDeployWebSuccessResponse = {
    projectId: string;
};
type FreestyleDomainVerificationRequest = {
    /**
     * The domain to create a verification code for
     */
    domain: string;
};
type FreestyleExecureScriptResultError = {
    error: string;
};
type FreestyleExecureScriptResultSuccess = {
    result: unknown;
};
type FreestyleExecuteScriptParams = {
    /**
     * The JavaScript or TypeScript script to execute
     */
    script: string;
    config?: FreestyleExecuteScriptParamsConfiguration;
};
type FreestyleExecuteScriptParamsConfiguration = {
    /**
     * The environment variables to set for the script
     */
    envVars?: {
        [key: string]: (string);
    };
    /**
     * The node modules to install for the script
     */
    nodeModules?: {
        [key: string]: (string);
    };
    /**
     * Tags for you to organize your scripts, useful for tracking what you're running
     */
    tags?: Array<(string)>;
    /**
     * The script timeout
     */
    timeout?: (string) | null;
};
type FreestyleFile = {
    /**
     * The content of the file
     */
    content: string;
    /**
     * The encoding of the file. Either **utf-8** or **base64**
     */
    encoding?: string;
};
type FreestyleLogResponseObject = {
    message: string;
};
type FreestyleVerifyDomainRequest = {
    domain: string;
};
type HandleDeployCloudstateData = {
    body: FreestyleCloudstateDeployRequest;
};
type HandleDeployCloudstateResponse = (FreestyleCloudstateDeploySuccessResponse);
type HandleDeployCloudstateError = (FreestyleCloudstateDeployErrorResponse);
type HandleBackupCloudstateData = {
    path: {
        id: string;
    };
};
type HandleBackupCloudstateResponse = (Array<(number)>);
type HandleBackupCloudstateError = (unknown);
type HandleListDomainsResponse = (Array<{
    domain: string;
    createdAt: number;
}>);
type HandleListDomainsError = ({
    message: string;
});
type HandleVerifyDomainData = {
    body: FreestyleVerifyDomainRequest;
};
type HandleVerifyDomainResponse = ({
    domain: string;
});
type HandleVerifyDomainError = ({
    message: string;
});
type HandleCreateDomainVerificationData = {
    body: FreestyleDomainVerificationRequest;
};
type HandleCreateDomainVerificationResponse = ({
    verificationCode: string;
    domain: string;
});
type HandleCreateDomainVerificationError = ({
    message: string;
});
type HandleExecuteScriptData = {
    body: FreestyleExecuteScriptParams;
};
type HandleExecuteScriptResponse = (FreestyleExecureScriptResultSuccess);
type HandleExecuteScriptError = (FreestyleExecureScriptResultError);
type HandleDeployWebData = {
    body: FreestyleDeployWebPayload;
};
type HandleDeployWebResponse = (FreestyleDeployWebSuccessResponse);
type HandleDeployWebError = (FreestyleDeployWebErrorResponse);
type HandleGetLogsData = {
    path: {
        id: string;
    };
};
type HandleGetLogsResponse = (Array<FreestyleLogResponseObject>);
type HandleGetLogsError = unknown;

export type { HandleVerifyDomainError as A, HandleCreateDomainVerificationData as B, HandleCreateDomainVerificationError as C, HandleExecuteScriptData as D, HandleExecuteScriptResponse as E, FreestyleExecuteScriptParamsConfiguration as F, HandleExecuteScriptError as G, HandleBackupCloudstateResponse as H, HandleDeployWebData as I, HandleDeployWebResponse as J, HandleDeployWebError as K, HandleGetLogsData as L, HandleGetLogsError as M, FreestyleExecureScriptResultSuccess as a, FreestyleDeployWebConfiguration as b, FreestyleDeployWebSuccessResponse as c, FreestyleCloudstateDeployRequest as d, FreestyleCloudstateDeploySuccessResponse as e, HandleGetLogsResponse as f, HandleCreateDomainVerificationResponse as g, HandleVerifyDomainResponse as h, HandleListDomainsResponse as i, FreestyleCloudstateDeployConfiguration as j, FreestyleCloudstateDeployErrorResponse as k, FreestyleDeployWebErrorResponse as l, FreestyleDeployWebPayload as m, FreestyleDomainVerificationRequest as n, FreestyleExecureScriptResultError as o, FreestyleExecuteScriptParams as p, FreestyleFile as q, FreestyleLogResponseObject as r, FreestyleVerifyDomainRequest as s, HandleDeployCloudstateData as t, HandleDeployCloudstateResponse as u, HandleDeployCloudstateError as v, HandleBackupCloudstateData as w, HandleBackupCloudstateError as x, HandleListDomainsError as y, HandleVerifyDomainData as z };
