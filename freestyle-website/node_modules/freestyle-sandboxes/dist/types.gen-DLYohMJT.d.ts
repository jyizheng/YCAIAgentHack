type Behavior = 'regex' | 'exact';
type CreateRepositoryRequest = {
    name: string;
};
type DeploymentLogEntry = {
    deploymentId: string;
    accountId: string;
    provisionedAt: string;
    timeout: string;
    state: DeploymentState;
    deployedAt?: (string) | null;
    domains: Array<(string)>;
    envVars: {
        [key: string]: (string);
    };
};
type DeploymentState = 'provisioning' | 'deployed' | 'failed';
type ExecuteLogEntry = {
    deployment: string;
    accountId: string;
    provisionedAt: string;
    startedAt?: (string) | null;
    duration?: (string) | null;
    state: ExecuteRunState;
    envVars: {
        [key: string]: (string);
    };
};
type ExecuteRunInfo = {
    code: string;
    nodeModules: {
        [key: string]: (string);
    };
};
type ExecuteRunState = 'starting' | 'running' | 'complete';
type FreestyleCloudstateDeployConfiguration = {
    /**
     * ID of the project to deploy, if not provided will create a new project
     */
    domains?: Array<(string)> | null;
    /**
     * The environment variables that the cloudstate deploy can access
     */
    envVars?: {
        [key: string]: (string);
    };
    cloudstateDatabaseId?: (string) | null;
};
type FreestyleCloudstateDeployErrorResponse = {
    message: string;
};
type FreestyleCloudstateDeployRequest = {
    classes: string;
    config?: FreestyleCloudstateDeployConfiguration;
};
type FreestyleCloudstateDeploySuccessResponse = {
    deploymentId: string;
    cloudstateDatabaseId: string;
};
type FreestyleDeleteDomainVerificationRequest = {
    /**
     * The domain to create a verification code for
     */
    domain: string;
    /**
     * The verification code
     */
    verificationCode: string;
};
type FreestyleDeployWebConfiguration = {
    /**
     * The entrypoint file for the website
     */
    entrypoint?: (string) | null;
    /**
     * The custom domains for the website, eg. [\"subdomain.yourwebsite.com\"]. You may include a single *.style.dev domain here.
     */
    domains?: Array<(string)> | null;
    /**
     * Project ID was our original way of tracking deployments together, it is now deprecated and will be removed in the future. Please use the domains field to specify the domains for your project.
     * @deprecated
     */
    projectId?: (string) | null;
    /**
     * Node Modules to install for the website, a map of package names to versions, e.g. { \"express\": \"4.17.1\" }. If this and a package-lock.json are provided, the package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock is also provided, the versions here will override the versions in those lock files.
     */
    nodeModules?: {
        [key: string]: (string);
    } | null;
    /**
     * The environment variables that the website can access
     * e.g. { \"RESEND_API_KEY\": \"re_123456789\" }
     */
    envVars?: {
        [key: string]: (string);
    } | null;
    serverStartCheck?: boolean;
    networkPermissions?: Array<FreestyleNetworkPermission> | null;
};
type FreestyleDeployWebErrorResponse = {
    message: string;
};
type FreestyleDeployWebPayload = {
    /**
     * The files to deploy, a map of file paths to file contents, e.g. { \"index.js\": {\"content\": \"your main\", \"encoding\": \"utf-8\"}, \"file2.js\": {\"content\": \"your helper\" } }
     *
     * **Do not include node modules in this bundle, they will not work**. Instead, includes a package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock, the node modules for the project will be installed from that lock file, or use the node_modules field in the configuration to specify the node modules to install.
     */
    files: {
        [key: string]: FreestyleFile;
    };
    config?: FreestyleDeployWebConfiguration;
};
type FreestyleDeployWebSuccessResponse = {
    deploymentId: string;
    domains?: Array<(string)> | null;
    /**
     * @deprecated
     */
    projectId?: (string) | null;
};
type FreestyleDomainVerificationRequest = {
    /**
     * The domain to create a verification code for
     */
    domain: string;
};
type FreestyleExecuteScriptParams = {
    /**
     * The JavaScript or TypeScript script to execute
     */
    script: string;
    config?: FreestyleExecuteScriptParamsConfiguration;
};
type FreestyleExecuteScriptParamsConfiguration = {
    /**
     * The environment variables to set for the script
     */
    envVars?: {
        [key: string]: (string);
    };
    /**
     * The node modules to install for the script
     */
    nodeModules?: {
        [key: string]: (string);
    };
    /**
     * Tags for you to organize your scripts, useful for tracking what you're running
     */
    tags?: Array<(string)>;
    /**
     * The script timeout
     */
    timeout?: (string) | null;
    /**
     * If false, we'll not resolve peer dependencies for the packages given, this can speed up execute performance, but will break packages with peers unless the peers are manually specified.
     */
    peerDependencyResolution?: boolean;
    networkPermissions?: Array<FreestyleNetworkPermission> | null;
};
type FreestyleExecuteScriptResultSuccess = {
    result: unknown;
    logs: Array<FreestyleJavaScriptLog>;
};
type FreestyleFile = {
    /**
     * The content of the file
     */
    content: string;
    /**
     * The encoding of the file. Either **utf-8** or **base64**
     */
    encoding?: string;
};
type FreestyleGetLogsResponse = {
    logs: Array<FreestyleLogResponseObject>;
};
type FreestyleJavaScriptLog = {
    /**
     * The log message
     */
    message: string;
    /**
     * The log level
     */
    type: string;
};
type FreestyleLogResponseObject = {
    message: string;
    timestamp: string;
};
type FreestyleNetworkPermission = (NetworkPermissionData & {
    action: 'allow';
}) | (NetworkPermissionData & {
    action: 'deny';
});
type action = 'allow';
type FreestyleVerifyDomainRequest = {
    domain: string;
};
type NetworkPermissionData = {
    query: string;
    behavior?: Behavior;
};
type RepositoryInfo = {
    id: string;
    name: string;
    ownerId: string;
};
type HandleDeployCloudstateData = {
    body: FreestyleCloudstateDeployRequest;
};
type HandleDeployCloudstateResponse = (FreestyleCloudstateDeploySuccessResponse);
type HandleDeployCloudstateError = (FreestyleCloudstateDeployErrorResponse);
type HandleBackupCloudstateData = {
    path: {
        id: string;
    };
};
type HandleBackupCloudstateResponse = (Array<(number)>);
type HandleBackupCloudstateError = (unknown);
type HandleVerifyWildcardResponse = ({
    domain: string;
});
type HandleVerifyWildcardError = ({
    message: string;
});
type HandleListDomainsResponse = (Array<{
    domain: string;
    createdAt: number;
}>);
type HandleListDomainsError = ({
    message: string;
});
type HandleListDomainVerificationRequestsResponse = (Array<{
    verificationCode: string;
    domain: string;
    createdAt: number;
}>);
type HandleListDomainVerificationRequestsError = ({
    message: string;
});
type HandleVerifyDomainData = {
    body: FreestyleVerifyDomainRequest;
};
type HandleVerifyDomainResponse = ({
    domain: string;
});
type HandleVerifyDomainError = ({
    message: string;
});
type HandleCreateDomainVerificationData = {
    body: FreestyleDomainVerificationRequest;
};
type HandleCreateDomainVerificationResponse = ({
    verificationCode: string;
    domain: string;
});
type HandleCreateDomainVerificationError = ({
    message: string;
});
type HandleDeleteDomainVerificationData = {
    body: FreestyleDeleteDomainVerificationRequest;
};
type HandleDeleteDomainVerificationResponse = ({
    verificationCode: string;
    domain: string;
});
type HandleDeleteDomainVerificationError = ({
    message: string;
});
type HandleListExecuteRunsData = {
    query?: {
        limit?: (number) | null;
        offset?: (number) | null;
    };
};
type HandleListExecuteRunsResponse = ({
    entries: Array<ExecuteLogEntry>;
    total: number;
    offset: number;
});
type HandleListExecuteRunsError = ({
    message: string;
});
type HandleGetExecuteRunData = {
    path: {
        deployment: string;
    };
};
type HandleGetExecuteRunResponse = ({
    metadata: ExecuteLogEntry;
    code: ExecuteRunInfo;
});
type HandleGetExecuteRunError = ({
    message: string;
});
type HandleExecuteScriptData = {
    body: FreestyleExecuteScriptParams;
};
type HandleExecuteScriptResponse = ({
    result: unknown;
    logs: Array<FreestyleJavaScriptLog>;
});
type HandleExecuteScriptError = ({
    error: string;
});
type ListRepositoriesHandlerData = {
    query: {
        /**
         * Maximum number of repositories to return
         */
        limit: number;
        /**
         * Offset for the list of repositories
         */
        offset: number;
    };
};
type ListRepositoriesHandlerResponse = ({
    repositories: Array<RepositoryInfo>;
    offset: number;
});
type ListRepositoriesHandlerError = (string);
type CreateRepoHandlerData = {
    body: CreateRepositoryRequest;
};
type CreateRepoHandlerResponse = ({
    repo_id: string;
});
type CreateRepoHandlerError = (string | unknown);
type DeleteRepoHandlerData = {
    path: {
        /**
         * The repository id
         */
        repo: string;
    };
};
type DeleteRepoHandlerResponse = (unknown);
type DeleteRepoHandlerError = (string | unknown);
type HandleGetLogsData = {
    query?: {
        deploymentId?: (string) | null;
        domain?: (string) | null;
    };
};
type HandleGetLogsResponse = (FreestyleGetLogsResponse);
type HandleGetLogsError = unknown;
type HandleDeployWebData = {
    body: FreestyleDeployWebPayload;
};
type HandleDeployWebResponse = (FreestyleDeployWebSuccessResponse);
type HandleDeployWebError = (FreestyleDeployWebErrorResponse);
type HandleListWebDeploysData = {
    query: {
        /**
         * Maximum number of repositories to return
         */
        limit: number;
        /**
         * Offset for the list of repositories
         */
        offset: number;
    };
};
type HandleListWebDeploysResponse = ({
    entries: Array<DeploymentLogEntry>;
    total: number;
    offset: number;
});
type HandleListWebDeploysError = ({
    message: string;
});
type HandleGetWebDeployDetailsData = {
    path: {
        deployment_id: string;
    };
};

export type { HandleCreateDomainVerificationData as $, FreestyleDomainVerificationRequest as A, Behavior as B, CreateRepoHandlerResponse as C, DeleteRepoHandlerResponse as D, ExecuteLogEntry as E, FreestyleExecuteScriptParamsConfiguration as F, FreestyleExecuteScriptParams as G, HandleBackupCloudstateResponse as H, FreestyleFile as I, FreestyleGetLogsResponse as J, FreestyleJavaScriptLog as K, ListRepositoriesHandlerResponse as L, FreestyleLogResponseObject as M, FreestyleNetworkPermission as N, action as O, FreestyleVerifyDomainRequest as P, NetworkPermissionData as Q, RepositoryInfo as R, HandleDeployCloudstateData as S, HandleDeployCloudstateResponse as T, HandleDeployCloudstateError as U, HandleBackupCloudstateData as V, HandleBackupCloudstateError as W, HandleVerifyWildcardError as X, HandleListDomainsError as Y, HandleListDomainVerificationRequestsError as Z, HandleVerifyDomainData as _, FreestyleExecuteScriptResultSuccess as a, HandleCreateDomainVerificationError as a0, HandleDeleteDomainVerificationData as a1, HandleDeleteDomainVerificationError as a2, HandleListExecuteRunsData as a3, HandleListExecuteRunsError as a4, HandleGetExecuteRunData as a5, HandleGetExecuteRunError as a6, HandleExecuteScriptData as a7, HandleExecuteScriptResponse as a8, HandleExecuteScriptError as a9, ListRepositoriesHandlerData as aa, ListRepositoriesHandlerError as ab, CreateRepoHandlerData as ac, CreateRepoHandlerError as ad, DeleteRepoHandlerData as ae, DeleteRepoHandlerError as af, HandleGetLogsData as ag, HandleGetLogsError as ah, HandleDeployWebData as ai, HandleDeployWebResponse as aj, HandleDeployWebError as ak, HandleListWebDeploysData as al, HandleListWebDeploysError as am, HandleGetWebDeployDetailsData as an, FreestyleDeployWebConfiguration as b, FreestyleDeployWebSuccessResponse as c, FreestyleCloudstateDeployRequest as d, FreestyleCloudstateDeploySuccessResponse as e, HandleGetLogsResponse as f, HandleCreateDomainVerificationResponse as g, HandleVerifyDomainResponse as h, HandleVerifyDomainError as i, HandleListDomainsResponse as j, HandleListDomainVerificationRequestsResponse as k, HandleDeleteDomainVerificationResponse as l, HandleListWebDeploysResponse as m, HandleListExecuteRunsResponse as n, HandleGetExecuteRunResponse as o, HandleVerifyWildcardResponse as p, CreateRepositoryRequest as q, DeploymentLogEntry as r, DeploymentState as s, ExecuteRunInfo as t, ExecuteRunState as u, FreestyleCloudstateDeployConfiguration as v, FreestyleCloudstateDeployErrorResponse as w, FreestyleDeleteDomainVerificationRequest as x, FreestyleDeployWebErrorResponse as y, FreestyleDeployWebPayload as z };
