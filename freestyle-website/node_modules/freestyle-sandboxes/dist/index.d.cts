import { F as FreestyleExecuteScriptParamsConfiguration, a as FreestyleExecuteScriptResultSuccess, D as DeploymentSource, b as FreestyleDeployWebConfiguration, c as FreestyleDeployWebSuccessResponseV2, d as FreestyleCloudstateDeployRequest, e as FreestyleCloudstateDeploySuccessResponse, H as HandleBackupCloudstateResponse, f as HandleGetLogsResponse, g as HandleCreateDomainVerificationResponse, h as HandleVerifyDomainResponse, i as HandleVerifyDomainError, j as HandleListDomainsResponse, k as HandleListDomainVerificationRequestsResponse, l as HandleDeleteDomainVerificationResponse, m as HandleListWebDeploysResponse, n as HandleListExecuteRunsResponse, o as HandleGetExecuteRunResponse, p as HandleVerifyWildcardResponse, q as HandleInsertDomainMappingResponse, r as HandleDeleteDomainMappingResponse, s as HandleListDomainMappingsResponse, C as CreateRepoSource, t as CreateRepoImport, u as CreateRepositoryResponseSuccess, v as HandleListRepositoriesResponse, w as HandleDeleteRepoResponse, G as GitIdentity, x as HandleDeleteIdentityResponse, A as AccessLevel, y as HandleGrantPermissionResponse, L as ListPermissionResponseSuccess, z as DescribePermissionResponseSuccess, B as CreatedToken, E as ListGitTokensResponseSuccess, I as HandleListGitTriggersResponse, J as GitTrigger, K as GitTriggerAction, M as HandleCreateGitTriggerResponse, S as SetDefaultBranchRequest, N as HandleGetContentsResponse, O as GetGithubSyncResponse } from './types.gen-CG8tIO9M.js';
export { T as AccessTokenInfo, R as AccessibleRepository, U as Behavior, V as BlobEncoding, W as BlobObject, X as BranchDetails, Y as CommitObject, Z as CommitParent, _ as CommitTree, cM as ConfigureGithubSyncData, cO as ConfigureGithubSyncError, $ as ConfigureGithubSyncRequest, cN as ConfigureGithubSyncResponse, a0 as CreateDomainMappingRequest, a1 as CreateRecordParams, a3 as CreateRepoRequest, a4 as CreateRepositoryRequest, a6 as CustomBuildOptions, P as DeploymentBuildOptions, a7 as DeploymentLogEntry, a9 as DeploymentState, aa as DevServer, ac as DevServerRequest, ad as DevServerStatusRequest, ae as DevServerWatchFilesRequest, af as DnsRecord, ag as DnsRecordData, ah as DnsRecordKind, ai as DomainVerificationRequest, aj as ExecRequest, ak as ExecuteLogEntry, al as ExecuteRunInfo, am as ExecuteRunState, an as FileReadContent, ap as FreestyleCloudstateDeployConfiguration, aq as FreestyleCloudstateDeployErrorResponse, ar as FreestyleDeleteDomainVerificationRequest, as as FreestyleDeployWebErrorResponse, at as FreestyleDeployWebPayload, au as FreestyleDeployWebPayloadV2, av as FreestyleDomainVerificationRequest, aw as FreestyleExecuteScriptParams, ax as FreestyleFile, ay as FreestyleGetLogsResponse, az as FreestyleJavaScriptLog, aA as FreestyleLogResponseObject, aB as FreestyleNetworkPermission, aD as FreestyleSandboxDomainMapping, aE as FreestyleVerifyDomainRequest, aF as GetDefaultBranchResponse, cK as GetGithubSyncData, cL as GetGithubSyncError, aG as GitCommitPushRequest, aH as GitContents, aJ as GitContentsDirEntryItem, aM as GitReference, aN as GitRepositoryTrigger, aK as GithubRepoSyncConfig, aL as GithubSyncConfigResponse, aQ as GrantPermissionRequest, bc as HandleBackupCloudstateData, bd as HandleBackupCloudstateError, by as HandleCreateDomainVerificationData, bz as HandleCreateDomainVerificationError, ct as HandleCreateGitTokenData, cv as HandleCreateGitTokenError, cu as HandleCreateGitTokenResponse, dh as HandleCreateGitTriggerData, di as HandleCreateGitTriggerError, c9 as HandleCreateIdentityError, c8 as HandleCreateIdentityResponse, bh as HandleCreateRecordData, bj as HandleCreateRecordError, bi as HandleCreateRecordResponse, cB as HandleCreateRepoData, cD as HandleCreateRepoError, cC as HandleCreateRepoResponse, bu as HandleDeleteDomainMappingData, bv as HandleDeleteDomainMappingError, bA as HandleDeleteDomainVerificationData, bB as HandleDeleteDomainVerificationError, dj as HandleDeleteGitTriggerData, dl as HandleDeleteGitTriggerError, dk as HandleDeleteGitTriggerResponse, ca as HandleDeleteIdentityData, cb as HandleDeleteIdentityError, bk as HandleDeleteRecordData, bm as HandleDeleteRecordError, bl as HandleDeleteRecordResponse, cS as HandleDeleteRepoData, cT as HandleDeleteRepoError, b9 as HandleDeployCloudstateData, bb as HandleDeployCloudstateError, ba as HandleDeployCloudstateResponse, ds as HandleDeployWebData, du as HandleDeployWebError, dt as HandleDeployWebResponse, dv as HandleDeployWebV2Data, dx as HandleDeployWebV2Error, dw as HandleDeployWebV2Response, cf as HandleDescribePermissionData, ch as HandleDescribePermissionError, cg as HandleDescribePermissionResponse, bU as HandleDevServerStatusData, bW as HandleDevServerStatusError, bV as HandleDevServerStatusResponse, dc as HandleDownloadTarballData, de as HandleDownloadTarballError, dd as HandleDownloadTarballResponse, dm as HandleDownloadZipData, dp as HandleDownloadZipError, dn as HandleDownloadZipResponse, bC as HandleEphemeralDevServerData, bE as HandleEphemeralDevServerError, bD as HandleEphemeralDevServerResponse, bF as HandleExecOnEphemeralDevServerData, bH as HandleExecOnEphemeralDevServerError, bG as HandleExecOnEphemeralDevServerResponse, c2 as HandleExecuteScriptData, c4 as HandleExecuteScriptError, c3 as HandleExecuteScriptResponse, cW as HandleGetBlobData, cY as HandleGetBlobError, cX as HandleGetBlobResponse, cZ as HandleGetCommitData, c$ as HandleGetCommitError, c_ as HandleGetCommitResponse, cU as HandleGetContentsData, cV as HandleGetContentsError, cE as HandleGetDefaultBranchData, cG as HandleGetDefaultBranchError, cF as HandleGetDefaultBranchResponse, c0 as HandleGetExecuteRunData, c1 as HandleGetExecuteRunError, dq as HandleGetLogsData, dr as HandleGetLogsError, d0 as HandleGetRefBranchData, d2 as HandleGetRefBranchError, d1 as HandleGetRefBranchResponse, d3 as HandleGetRefTagData, d5 as HandleGetRefTagError, d4 as HandleGetRefTagResponse, d6 as HandleGetTagData, d8 as HandleGetTagError, d7 as HandleGetTagResponse, d9 as HandleGetTreeData, db as HandleGetTreeError, da as HandleGetTreeResponse, dA as HandleGetWebDeployDetailsData, bO as HandleGitCommitPushData, bQ as HandleGitCommitPushError, bP as HandleGitCommitPushResponse, ci as HandleGrantPermissionData, cj as HandleGrantPermissionError, bs as HandleInsertDomainMappingData, bt as HandleInsertDomainMappingError, Q as HandleListDomainMappingsData, br as HandleListDomainMappingsError, bw as HandleListDomainVerificationRequestsError, bp as HandleListDomainsData, bq as HandleListDomainsError, b_ as HandleListExecuteRunsData, b$ as HandleListExecuteRunsError, cq as HandleListGitTokensData, cs as HandleListGitTokensError, cr as HandleListGitTokensResponse, df as HandleListGitTriggersData, dg as HandleListGitTriggersError, c5 as HandleListIdentitiesData, c7 as HandleListIdentitiesError, c6 as HandleListIdentitiesResponse, cc as HandleListPermissionsData, ce as HandleListPermissionsError, cd as HandleListPermissionsResponse, be as HandleListRecordsData, bg as HandleListRecordsError, bf as HandleListRecordsResponse, cz as HandleListRepositoriesData, cA as HandleListRepositoriesError, dy as HandleListWebDeploysData, dz as HandleListWebDeploysError, bL as HandleReadFileFromEphemeralDevServerData, bN as HandleReadFileFromEphemeralDevServerError, bM as HandleReadFileFromEphemeralDevServerResponse, cw as HandleRevokeGitTokenData, cy as HandleRevokeGitTokenError, cx as HandleRevokeGitTokenResponse, ck as HandleRevokePermissionData, cm as HandleRevokePermissionError, cl as HandleRevokePermissionResponse, cH as HandleSetDefaultBranchData, cJ as HandleSetDefaultBranchError, cI as HandleSetDefaultBranchResponse, bR as HandleShutdownDevServerData, bT as HandleShutdownDevServerError, bS as HandleShutdownDevServerResponse, cn as HandleUpdatePermissionData, cp as HandleUpdatePermissionError, co as HandleUpdatePermissionResponse, bx as HandleVerifyDomainData, bn as HandleVerifyWildcardData, bo as HandleVerifyWildcardError, bX as HandleWatchDevServerFilesData, bZ as HandleWatchDevServerFilesError, bY as HandleWatchDevServerFilesResponse, bI as HandleWriteFileFromEphemeralDevServerData, bK as HandleWriteFileFromEphemeralDevServerError, bJ as HandleWriteFileFromEphemeralDevServerResponse, aR as InternalServerError, aS as ListRecordsResponse, aT as NetworkPermissionData, aU as ReadFileEphemeralDevServerResponses, aV as ReadFileRequest, cP as RemoveGithubSyncData, cR as RemoveGithubSyncError, cQ as RemoveGithubSyncResponse, aW as RepositoryInfo, aX as RepositoryMetadata, aY as RevokeGitTokenRequest, aZ as SetDefaultBranchResponse, a_ as ShutdownDevServerRequest, a$ as Signature, b0 as TagDetails, b1 as TagObject, b2 as TagTarget, b3 as TreeEntry, b5 as TreeObject, b6 as UpdatePermissionRequest, b7 as Visibility, b8 as WriteFileRequest, aC as action, aP as action2, aO as event, a8 as kind, ab as kind2, ao as kind3, a2 as type, a5 as type2, aI as type3, b4 as type4 } from './types.gen-CG8tIO9M.js';

interface FreestyleDevServer {
    /**
     * The URL for the dev server's HTTP API.
     */
    ephemeralUrl: string;
    /**
     * The URL to the MCP endpoint for the dev server.
     */
    mcpEphemeralUrl: string;
    /**
     * The URL for the VSCode server running in the dev server.
     */
    codeServerUrl: string;
    /**
     * Whether the dev server was just created.
     */
    isNew: boolean;
    fs: FreestyleDevServerFilesystem;
    process: FreestyleDevServerProcess;
    devCommandRunning: boolean;
    installCommandRunning: boolean;
    /**
     * Get the status of the dev server
     */
    status(): Promise<{
        installing: boolean;
        devRunning: boolean;
    }>;
    /**
     * Commit and push changes to the dev server repository
     * @param message The commit message
     */
    commitAndPush(message: string): Promise<void>;
    /**
     * Shutdown the dev server
     */
    shutdown(): Promise<{
        success: boolean;
        message: string;
    }>;
}
interface FreestyleDevServerFilesystem {
    /**
     * List files in the dev server directory
     */
    ls(path?: string): Promise<Array<string>>;
    /**
     * Read a file from the dev server
     * @param path The path to the file
     * @param encoding The encoding to use (defaults to utf-8)
     */
    readFile(path: string, encoding?: string): Promise<string>;
    /**
     * Write a file to the dev server
     * @param path The path to write to
     * @param content The content to write
     * @param encoding The encoding to use (defaults to utf-8)
     */
    writeFile(path: string, content: string | ArrayBufferLike, encoding?: string): Promise<void>;
    watch(): AsyncGenerator<{
        eventType: string;
        filename: string;
    }>;
}
interface FreestyleDevServerProcess {
    /**
     * Execute a command on the dev server
     * @param cmd The command to execute
     * @param background Whether to run the command in the background
     */
    exec(cmd: string, background?: boolean): Promise<{
        id: string;
        isNew: boolean;
        stdout?: string[];
        stderr?: string[];
    }>;
}

/**
 * Create a new git repository with a single commit from a static import.
 */
type CreateGitRepositoryImport = {
    /**
     * Create a new git repository with a single commit from a static import.
     */
    import: CreateRepoImport;
    /**
     * Create a git repository from another git reopsitory
     */
    source?: never;
};
/**
 * Create a git repository from another git reopsitory
 */
type CreateGitRepositorySource = {
    /**
     * Create a git repository from another git reopsitory
     */
    source: CreateRepoSource;
    /**
     * Create a new git repository with a single commit from a static import.
     */
    import?: never;
};
type Options = {
    /**
     * The base URL for the API.
     */
    baseUrl?: string;
    /**
     * The API key to use for requests.
     */
    apiKey?: string;
    /**
     * Custom Headers to be sent with each request.
     */
    headers?: Record<string, string>;
};
declare class FreestyleSandboxes {
    private client;
    options: Options;
    constructor(options?: Options);
    /**
     * Execute a script in a sandbox.
     */
    executeScript(script: string, config?: FreestyleExecuteScriptParamsConfiguration): Promise<FreestyleExecuteScriptResultSuccess>;
    /**
     * Deploy a Web project to a sandbox.
     */
    deployWeb(source: DeploymentSource, config?: FreestyleDeployWebConfiguration): Promise<FreestyleDeployWebSuccessResponseV2>;
    /**
     * Deploy a Cloudstate project to a sandbox.
     */
    deployCloudstate(body: FreestyleCloudstateDeployRequest): Promise<FreestyleCloudstateDeploySuccessResponse>;
    /**
     * Get a backup of a Cloudstate project in a sandbox.
     * @param id The ID of the Cloudstate project.
     * @returns The backup of the Cloudstate project.
     * @throws An error if the backup could not be retrieved.
     */
    backupCloudstate(id: string): Promise<HandleBackupCloudstateResponse>;
    /**
     * Get logs for an execute run, or web deployment.
     * @param id The ID of the sandbox.
     * @returns The logs for the sandbox.
     * @throws An error if the logs could not be retrieved.
     */
    getLogs(id: string): Promise<HandleGetLogsResponse>;
    /**
     * Create a a domain verification request.
     * @param domain The domain to verify.
     * @returns The domain verification token.
     */
    createDomainVerificationRequest(domain: string): Promise<HandleCreateDomainVerificationResponse>;
    verifyDomainVerificationRequest(id: string): Promise<HandleVerifyDomainResponse>;
    /**
     * Verify a domain. Note, this requires the domain verification token to be already set up.
     * @param domain The domain to verify.
     * @returns The domain verification request.
     */
    verifyDomain(domain: string): Promise<HandleVerifyDomainResponse | HandleVerifyDomainError>;
    listDomains(): Promise<HandleListDomainsResponse>;
    listDomainVerificationRequests(): Promise<HandleListDomainVerificationRequestsResponse>;
    deleteDomainVerificationRequest(domain: string, verificationCode: string): Promise<HandleDeleteDomainVerificationResponse>;
    listWebDeployments(limit?: number, offset?: number): Promise<HandleListWebDeploysResponse>;
    listExecuteRuns(limit?: number, offset?: number): Promise<HandleListExecuteRunsResponse>;
    getExecuteRun(id: string): Promise<HandleGetExecuteRunResponse>;
    /** Provision a wildcard certificate for domain. */
    provisionWildcard(domain: string): Promise<HandleVerifyWildcardResponse>;
    /**
     * Insert a domain mapping for a deployment.
     */
    insertDomainMapping({ domain, deploymentId, }: {
        domain: string;
        deploymentId: string;
    }): Promise<HandleInsertDomainMappingResponse>;
    /**
     * Remove a domain mapping for a deployment.
     */
    removeDomainMapping({ domain, }: {
        domain: string;
    }): Promise<HandleDeleteDomainMappingResponse>;
    listDomainMappings({ domain, domainOwnership, limit, offset, }: {
        domain?: string;
        domainOwnership?: string;
        limit?: number;
        offset?: number;
    }): Promise<HandleListDomainMappingsResponse>;
    /**
     * Create a new git repository.
     */
    createGitRepository({ name, public: pub, source, import: _import, defaultBranch, }: {
        name?: string;
        public?: boolean;
        defaultBranch?: string;
    } & (CreateGitRepositorySource | CreateGitRepositoryImport)): Promise<CreateRepositoryResponseSuccess>;
    /**
     * List git repositories.
     */
    listGitRepositories({ limit, offset, }?: {
        limit?: number;
        offset?: number;
    }): Promise<HandleListRepositoriesResponse>;
    /**
     * Delete a git repository.
     */
    deleteGitRepository({ repoId, }: {
        repoId: string;
    }): Promise<HandleDeleteRepoResponse>;
    /**
     * Create a new git identity.
     */
    createGitIdentity(): Promise<GitIdentity>;
    /**
     * Delete a git identity.
     */
    deleteGitIdentity({ identityId, }: {
        identityId: string;
    }): Promise<HandleDeleteIdentityResponse>;
    /**
     * Grant a git identity access to a repository.
     */
    grantGitPermission({ repoId, identityId, permission, }: {
        repoId: string;
        identityId: string;
        permission: AccessLevel;
    }): Promise<HandleGrantPermissionResponse>;
    /**
     * Update a git identity's permissions on a repository.
     */
    updateGitPermission({ repoId, identityId, permission, }: {
        repoId: string;
        identityId: string;
        permission: AccessLevel;
    }): Promise<void>;
    /**
     * Revoke a git identity's access to a repository.
     */
    revokeGitPermission({ repoId, identityId, }: {
        repoId: string;
        identityId: string;
    }): Promise<void>;
    /**
     * List access permissions for a git identity.
     */
    listGitPermissions({ identityId, }: {
        identityId: string;
    }): Promise<ListPermissionResponseSuccess>;
    /**
     * Get the permission of a git identity on a repository.
     */
    getGitPermission({ repoId, identityId, }: {
        repoId: string;
        identityId: string;
    }): Promise<DescribePermissionResponseSuccess>;
    /**
     * Create a new git access token for an identity.
     */
    createGitAccessToken({ identityId, }: {
        identityId: string;
    }): Promise<CreatedToken>;
    /**
     * Revoke a git access token.
     */
    revokeGitAccessToken({ identityId, tokenId, }: {
        identityId: string;
        tokenId: string;
    }): Promise<void>;
    /**
     * List git access tokens for an identity.
     */
    listGitAccessTokens({ identityId, }: {
        identityId: string;
    }): Promise<ListGitTokensResponseSuccess>;
    /**
     * List git triggers for a repository.
     */
    listGitTriggers({ repoId, }: {
        repoId: string;
    }): Promise<HandleListGitTriggersResponse>;
    /**
     * Create a git trigger for a repository.
     */
    createGitTrigger({ repoId, trigger, action, }: {
        repoId: string;
        trigger: GitTrigger;
        action: GitTriggerAction;
    }): Promise<HandleCreateGitTriggerResponse>;
    /**
     * Delete a git trigger.
     */
    deleteGitTrigger({ triggerId }: {
        triggerId: string;
    }): Promise<void>;
    /**
     * Set the default branch for a git repository.
     */
    setGitRepoDefaultBranch({ repoId, defaultBranch, }: SetDefaultBranchRequest & {
        repoId: string;
    }): Promise<void>;
    /**
     * Get the default branch for a git repository.
     */
    getGitRepoDefaultBranch({ repoId, }: {
        repoId: string;
    }): Promise<string>;
    /**
     * Get the contents of a git repository at the given path.
     */
    getGitRepoContents({ repoId, path, ref, }: {
        repoId: string;
        path?: string;
        ref?: string;
    }): Promise<HandleGetContentsResponse>;
    /**
     * Configure a git repository to sync with GitHub.
     */
    configureGitRepoGitHubSync({ repoId, githubRepoName, }: {
        repoId: string;
        githubRepoName: string;
    }): Promise<void>;
    /**
     * Remove the GitHub sync configuration for a git repository.
     */
    removeGitRepoGitHubSync({ repoId }: {
        repoId: string;
    }): Promise<void>;
    /**
     * Get the GitHub sync configuration for a git repository.
     */
    getGitRepoGitHubSyncConfig({ repoId, }: {
        repoId: any;
    }): Promise<GetGithubSyncResponse | null>;
    /**
     * Request a dev server for a repository. If a dev server is already running
     * for that repository, it will return a url to that server. Dev servers are
     * ephemeral so you should call this function every time you need a url. Do
     * not store the url in your database!
     */
    requestDevServer(options: {
        /**
         * @deprecated
         */
        repoUrl?: string;
        repoId?: string;
        /**
         * @deprecated
         */
        repo?: string;
        baseId?: string;
        devCommand?: string;
        preDevCommandOnce?: string;
        envVars?: Record<string, string>;
        computeClass?: string;
        timeout?: number;
    }): Promise<FreestyleDevServer>;
    fetch(path: string, init?: RequestInit): Promise<Response>;
}

export { AccessLevel, CreateRepoImport, CreateRepoSource, CreateRepositoryResponseSuccess, CreatedToken, DeploymentSource, DescribePermissionResponseSuccess, FreestyleCloudstateDeployRequest, FreestyleCloudstateDeploySuccessResponse, FreestyleDeployWebConfiguration, FreestyleDeployWebSuccessResponseV2, type FreestyleDevServer, type FreestyleDevServerFilesystem, FreestyleExecuteScriptParamsConfiguration, FreestyleExecuteScriptResultSuccess, FreestyleSandboxes, GetGithubSyncResponse, GitIdentity, GitTrigger, GitTriggerAction, HandleBackupCloudstateResponse, HandleCreateDomainVerificationResponse, HandleCreateGitTriggerResponse, HandleDeleteDomainMappingResponse, HandleDeleteDomainVerificationResponse, HandleDeleteIdentityResponse, HandleDeleteRepoResponse, HandleGetContentsResponse, HandleGetExecuteRunResponse, HandleGetLogsResponse, HandleGrantPermissionResponse, HandleInsertDomainMappingResponse, HandleListDomainMappingsResponse, HandleListDomainVerificationRequestsResponse, HandleListDomainsResponse, HandleListExecuteRunsResponse, HandleListGitTriggersResponse, HandleListRepositoriesResponse, HandleListWebDeploysResponse, HandleVerifyDomainError, HandleVerifyDomainResponse, HandleVerifyWildcardResponse, ListGitTokensResponseSuccess, ListPermissionResponseSuccess, SetDefaultBranchRequest };
