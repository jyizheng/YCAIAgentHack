/**
 * Identical to [`RepositoryInfo`], but with the permissions field added.
 */
type AccessibleRepository = {
    id: string;
    name?: (string) | null;
    accountId: string;
    permissions: AccessLevel;
    visibility: Visibility;
};
type AccessLevel = 'read' | 'write';
type AccessTokenInfo = {
    id: string;
};
type Behavior = 'regex' | 'exact';
/**
 * The encoding of a blob from the API. Always `base64`.
 */
type BlobEncoding = 'base64';
/**
 * Blob object
 */
type BlobObject = {
    /**
     * The content of the blob, base64 encoded.
     */
    content: string;
    /**
     * The encoding of the blob. Always `base64`.
     */
    encoding: BlobEncoding;
    /**
     * The object's hash.
     */
    sha: string;
};
/**
 * Commit object
 */
type CommitObject = {
    /**
     * The author of the commit
     */
    author: Signature;
    /**
     * The committer
     */
    committer: Signature;
    /**
     * The commit message
     */
    message: string;
    /**
     * The ID of the tree pointed to by this commit
     */
    tree: CommitTree;
    /**
     * Parent commit(s) of this commit
     */
    parents: Array<CommitParent>;
    /**
     * The commit's hash ID
     */
    sha: string;
};
type CommitParent = {
    /**
     * The commit's hash ID
     */
    sha: string;
};
type CommitTree = {
    /**
     * The tree's hash ID
     */
    sha: string;
};
type CreateDomainMappingRequest = {
    deploymentId: string;
};
type CreatedToken = {
    id: string;
    token: string;
};
type CreateRecordParams = {
    domain: string;
    record: DnsRecordData;
};
type CreateRepoImport = {
    files: {
        [key: string]: (string);
    };
    commit_message: string;
    author_name?: (string) | null;
    author_email?: (string) | null;
    type: 'files';
} | {
    url: string;
    dir?: (string) | null;
    commit_message: string;
    author_name?: (string) | null;
    author_email?: (string) | null;
    type: 'tar';
} | {
    url: string;
    dir?: (string) | null;
    commit_message: string;
    author_name?: (string) | null;
    author_email?: (string) | null;
    type: 'zip';
} | {
    url: string;
    branch?: (string) | null;
    dir?: (string) | null;
    commit_message: string;
    author_name?: (string) | null;
    author_email?: (string) | null;
    type: 'git';
};
type type = 'files';
type CreateRepoRequest = {
    source?: (null | CreateRepoSource);
    import?: (null | CreateRepoImport);
};
type CreateRepositoryRequest = {
    /**
     * This name is not visible to users, and is only accessible to you via API and in the
     * dashboard. Mostly useful for observability.
     */
    name?: (string) | null;
    public?: boolean;
    source?: CreateRepoSource;
    import?: CreateRepoImport;
};
type CreateRepositoryResponseSuccess = {
    repoId: string;
};
type CreateRepoSource = {
    url: string;
    branch?: (string) | null;
    depth?: (number) | null;
    type: 'git';
};
type type2 = 'git';
type CustomBuildOptions = {
    command?: (string) | null;
    envVars?: {
        [key: string]: (string);
    } | null;
    outDir?: (string) | null;
};
type DeploymentBuildOptions = (CustomBuildOptions) | boolean;
type DeploymentLogEntry = {
    deploymentId: string;
    accountId: string;
    provisionedAt: string;
    timeout: string;
    state: DeploymentState;
    deployedAt?: (string) | null;
    domains: Array<(string)>;
    envVars: {
        [key: string]: (string);
    };
};
type DeploymentSource = {
    files: {
        [key: string]: FreestyleFile;
    };
    kind: 'files';
} | {
    url: string;
    kind: 'tar';
} | {
    url: string;
    branch?: (string) | null;
    dir?: (string) | null;
    kind: 'git';
};
type kind = 'files';
type DeploymentState = 'provisioning' | 'deployed' | 'failed';
type DescribePermissionResponseSuccess = {
    identity: string;
    repo: string;
    accessLevel?: (null | AccessLevel);
};
type DevServer = {
    repoId: string;
    kind: 'repo';
};
type kind2 = 'repo';
type DevServerRequest = {
    devCommand?: (string) | null;
    preDevCommandOnce?: (string) | null;
    baseId?: (string) | null;
    envVars?: {
        [key: string]: (string);
    } | null;
    repoId?: (string) | null;
    computeClass?: (string) | null;
    /**
     * Timeout in seconds
     */
    timeout?: (number) | null;
    /**
     * @deprecated
     */
    domain?: (string) | null;
    /**
     * @deprecated
     */
    repo?: (string) | null;
};
type DevServerStatusRequest = {
    devServer: DevServer;
};
type DevServerWatchFilesRequest = {
    devServer: DevServer;
};
type DnsRecord = {
    kind: DnsRecordKind;
    name: string;
    value: string;
    ttl: string;
    priority?: (number) | null;
    managed: boolean;
};
type DnsRecordData = {
    kind: DnsRecordKind;
    name: string;
    value: string;
    ttl?: (string) | null;
    priority?: (number) | null;
};
type DnsRecordKind = 'A' | 'AAAA' | 'CNAME' | 'TXT' | 'NS';
type DomainVerificationRequest = {
    id: string;
    domain: string;
    accountId: string;
    verificationCode: string;
    createdAt: string;
};
type ExecRequest = {
    devServer: DevServer;
    command: string;
    /**
     * Spawn this command as a background process and return immediately
     */
    background: boolean;
};
type ExecuteLogEntry = {
    deployment: string;
    accountId: string;
    provisionedAt: string;
    startedAt?: (string) | null;
    duration?: (string) | null;
    state: ExecuteRunState;
    envVars: {
        [key: string]: (string);
    };
};
type ExecuteRunInfo = {
    code: string;
    nodeModules: {
        [key: string]: (string);
    };
};
type ExecuteRunState = 'starting' | 'running' | 'complete';
type FileReadContent = {
    content: string;
    encoding: string;
    kind: 'file';
} | {
    files: Array<(string)>;
    kind: 'directory';
};
type kind3 = 'file';
type FreestyleCloudstateDeployConfiguration = {
    /**
     * ID of the project to deploy, if not provided will create a new project
     */
    domains?: Array<(string)> | null;
    /**
     * The environment variables that the cloudstate deploy can access
     */
    envVars?: {
        [key: string]: (string);
    };
    cloudstateDatabaseId?: (string) | null;
};
type FreestyleCloudstateDeployErrorResponse = {
    message: string;
};
type FreestyleCloudstateDeployRequest = {
    classes: string;
    config?: FreestyleCloudstateDeployConfiguration;
};
type FreestyleCloudstateDeploySuccessResponse = {
    deploymentId: string;
    cloudstateDatabaseId: string;
};
type FreestyleDeleteDomainVerificationRequest = {
    /**
     * The domain to create a verification code for
     */
    domain: string;
    /**
     * The verification code
     */
    verificationCode: string;
};
type FreestyleDeployWebConfiguration = {
    /**
     * The entrypoint file for the website
     */
    entrypoint?: (string) | null;
    /**
     * The custom domains for the website, eg. [\"subdomain.yourwebsite.com\"]. You may include a single *.style.dev domain here.
     */
    domains?: Array<(string)> | null;
    /**
     * Project ID was our original way of tracking deployments together, it is now deprecated and will be removed in the future. Please use the domains field to specify the domains for your project.
     * @deprecated
     */
    projectId?: (string) | null;
    /**
     * Node Modules to install for the website, a map of package names to versions, e.g. { \"express\": \"4.17.1\" }. If this and a package-lock.json are provided, the package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock is also provided, the versions here will override the versions in those lock files.
     */
    nodeModules?: {
        [key: string]: (string);
    } | null;
    /**
     * The environment variables that the website can access
     * e.g. { \"RESEND_API_KEY\": \"re_123456789\" }
     */
    envVars?: {
        [key: string]: (string);
    } | null;
    serverStartCheck?: boolean;
    networkPermissions?: Array<FreestyleNetworkPermission> | null;
    build?: (null | DeploymentBuildOptions);
    /**
     * Timeout for the deployment in seconds. If not provided, the default is 10 seconds.
     */
    timeout?: (number) | null;
};
type FreestyleDeployWebErrorResponse = {
    message: string;
};
type FreestyleDeployWebPayload = {
    /**
     * The files to deploy, a map of file paths to file contents, e.g. { \"index.js\": {\"content\": \"your main\", \"encoding\": \"utf-8\"}, \"file2.js\": {\"content\": \"your helper\" } }
     *
     * **Do not include node modules in this bundle, they will not work**. Instead, includes a package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock, the node modules for the project will be installed from that lock file, or use the node_modules field in the configuration to specify the node modules to install.
     */
    files: {
        [key: string]: FreestyleFile;
    };
    config?: FreestyleDeployWebConfiguration;
};
type FreestyleDeployWebPayloadV2 = {
    /**
     * The files to deploy, a map of file paths to file contents, e.g. { \"index.js\": {\"content\": \"your main\", \"encoding\": \"utf-8\"}, \"file2.js\": {\"content\": \"your helper\" } }
     *
     * **Do not include node modules in this bundle, they will not work**. Instead, includes a package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock, the node modules for the project will be installed from that lock file, or use the node_modules field in the configuration to specify the node modules to install.
     */
    source: DeploymentSource;
    config?: FreestyleDeployWebConfiguration;
};
type FreestyleDeployWebSuccessResponseV2 = {
    deploymentId: string;
    /**
     * @deprecated
     */
    projectId: string;
    domains?: Array<(string)> | null;
    /**
     * The entrypoint file for the website. If not specified we try to automatically detect it.
     */
    entrypoint: string;
};
type FreestyleDomainVerificationRequest = {
    /**
     * The domain to create a verification code for
     */
    domain: string;
};
type FreestyleExecuteScriptParams = {
    /**
     * The JavaScript or TypeScript script to execute
     */
    script: string;
    config?: FreestyleExecuteScriptParamsConfiguration;
};
type FreestyleExecuteScriptParamsConfiguration = {
    /**
     * The environment variables to set for the script
     */
    envVars?: {
        [key: string]: (string);
    };
    /**
     * The node modules to install for the script
     */
    nodeModules?: {
        [key: string]: (string);
    };
    /**
     * Tags for you to organize your scripts, useful for tracking what you're running
     */
    tags?: Array<(string)>;
    /**
     * The script timeout
     */
    timeout?: (string) | null;
    /**
     * If false, we'll not resolve peer dependencies for the packages given, this can speed up execute performance, but will break packages with peers unless the peers are manually specified.
     */
    peerDependencyResolution?: boolean;
    networkPermissions?: Array<FreestyleNetworkPermission> | null;
    /**
     * These headers will be added to every fetch request made through the script
     */
    customHeaders?: {
        [key: string]: (string);
    };
    /**
     * Proxy all outgoing requests through this URL
     */
    proxy?: (string) | null;
};
type FreestyleExecuteScriptResultSuccess = {
    /**
     * The return value of the default export of the script
     */
    result: unknown;
    logs: Array<FreestyleJavaScriptLog>;
};
type FreestyleFile = {
    /**
     * The content of the file
     */
    content: string;
    /**
     * The encoding of the file. Either **utf-8** or **base64**
     */
    encoding?: string;
};
type FreestyleGetLogsResponse = {
    logs: Array<FreestyleLogResponseObject>;
};
type FreestyleJavaScriptLog = {
    /**
     * The log message
     */
    message: string;
    /**
     * The log level
     */
    type: string;
};
type FreestyleLogResponseObject = {
    message: string;
    timestamp: string;
};
type FreestyleNetworkPermission = (NetworkPermissionData & {
    action: 'allow';
}) | (NetworkPermissionData & {
    action: 'deny';
});
type action = 'allow';
/**
 * Verify a domain verification request, can either be done for a domain, or for a specific request
 */
type FreestyleVerifyDomainRequest = {
    domain: string;
} | {
    id: string;
};
type GitCommitPushRequest = {
    devServer: DevServer;
    message: string;
};
type GitContents = {
    name: string;
    path: string;
    /**
     * The hash / object ID of the file.
     */
    sha: string;
    size: number;
    /**
     * Base64-encoded content.
     */
    content: string;
    type: 'file';
} | {
    name: string;
    path: string;
    /**
     * The hash / object ID of the directory.
     */
    sha: string;
    entries: Array<GitContentsDirEntryItem>;
    type: 'dir';
};
type type3 = 'file';
type GitContentsDirEntryItem = {
    name: string;
    path: string;
    /**
     * The hash / object ID of the file.
     */
    sha: string;
    size: number;
    type: 'file';
} | {
    name: string;
    path: string;
    /**
     * The hash / object ID of the directory.
     */
    sha: string;
    entries: Array<({
        [key: string]: unknown;
    })>;
    type: 'dir';
};
type GitIdentity = {
    id: string;
    managed: boolean;
};
/**
 * A reference to a Git object
 */
type GitReference = {
    /**
     * The name of the ref (e.g., "refs/heads/main" or "refs/tags/v1.0.0")
     */
    name: string;
    /**
     * The SHA-1 hash of the Git object this reference points to
     */
    sha: string;
};
type GitRepositoryTrigger = {
    repositoryId: string;
    trigger: ({
        branches?: Array<(string)> | null;
        globs?: Array<(string)> | null;
        event: 'push';
    });
    action: ({
        endpoint: string;
        action: 'webhook';
    });
    managed: boolean;
    id: string;
    createdAt: string;
};
type event = 'push';
type action2 = 'webhook';
type GitTrigger = {
    branches?: Array<(string)> | null;
    globs?: Array<(string)> | null;
    event: 'push';
};
type GitTriggerAction = {
    endpoint: string;
    action: 'webhook';
};
type GrantPermissionRequest = {
    permission: AccessLevel;
};
type InternalServerError = string;
type ListGitTokensResponseSuccess = {
    tokens: Array<AccessTokenInfo>;
};
type ListPermissionResponseSuccess = {
    repositories: Array<AccessibleRepository>;
};
type ListRecordsResponse = {
    records: Array<DnsRecord>;
};
type NetworkPermissionData = {
    query: string;
    behavior?: Behavior;
};
type ReadFileEphemeralDevServerResponses = {
    id: string;
    isNew: boolean;
    content: ({
        content: string;
        encoding: string;
        kind: 'file';
    } | {
        files: Array<(string)>;
        kind: 'directory';
    });
} | {
    id: string;
    isNew: boolean;
} | InternalServerError;
type ReadFileRequest = {
    devServer: DevServer;
    encoding?: string;
};
type RepositoryInfo = {
    id: string;
    name?: (string) | null;
    accountId: string;
    visibility: Visibility;
};
type RevokeGitTokenRequest = {
    tokenId: string;
};
type ShutdownDevServerRequest = {
    /**
     * The dev server to shutdown
     */
    devServer: DevServer;
};
type Signature = {
    /**
     * The date marker for this signature
     */
    date: string;
    name: string;
    email: string;
};
/**
 * Tag object
 */
type TagObject = {
    /**
     * The tag name
     */
    name: string;
    tagger?: (null | Signature);
    /**
     * The tag message
     */
    message?: (string) | null;
    /**
     * The object this tag points to
     */
    target: TagTarget;
    /**
     * The tag's hash ID
     */
    sha: string;
};
type TagTarget = {
    /**
     * The target object's hash ID
     */
    sha: string;
};
type TreeEntry = {
    path: string;
    sha: string;
    type: 'blob';
} | {
    path: string;
    sha: string;
    type: 'tree';
};
type type4 = 'blob';
/**
 * Tree object
 */
type TreeObject = {
    /**
     * The tree's entries
     */
    tree: Array<TreeEntry>;
    /**
     * The tree's hash ID
     */
    sha: string;
};
type UpdatePermissionRequest = {
    permission: AccessLevel;
};
type Visibility = 'public' | 'private';
type WriteFileRequest = {
    devServer: DevServer;
    content: string;
    encoding?: string;
};
type HandleDeployCloudstateData = {
    body: FreestyleCloudstateDeployRequest;
};
type HandleDeployCloudstateResponse = (FreestyleCloudstateDeploySuccessResponse);
type HandleDeployCloudstateError = (FreestyleCloudstateDeployErrorResponse);
type HandleBackupCloudstateData = {
    path: {
        id: string;
    };
};
type HandleBackupCloudstateResponse = (Array<(number)>);
type HandleBackupCloudstateError = (unknown);
type HandleListRecordsData = {
    query: {
        domain: string;
    };
};
type HandleListRecordsResponse = (ListRecordsResponse);
type HandleListRecordsError = ({
    message: string;
});
type HandleCreateRecordData = {
    body: CreateRecordParams;
};
type HandleCreateRecordResponse = ({
    record: DnsRecord;
});
type HandleCreateRecordError = ({
    message: string;
});
type HandleDeleteRecordData = {
    query: {
        domain: string;
        record: DnsRecord;
    };
};
type HandleDeleteRecordResponse = ({
    message: string;
});
type HandleDeleteRecordError = ({
    message: string;
});
type HandleVerifyWildcardData = {
    path: {
        domain: string;
    };
};
type HandleVerifyWildcardResponse = ({
    domain: string;
});
type HandleVerifyWildcardError = ({
    message: string;
});
type HandleListDomainsResponse = (Array<{
    domain: string;
    createdAt: string;
}>);
type HandleListDomainsError = ({
    message: string;
});
type HandleInsertDomainMappingData = {
    body: CreateDomainMappingRequest;
    path: {
        domain: string;
    };
};
type HandleInsertDomainMappingResponse = (unknown);
type HandleInsertDomainMappingError = ({
    message: string;
});
type HandleDeleteDomainMappingData = {
    path: {
        domain: string;
    };
};
type HandleDeleteDomainMappingResponse = (unknown);
type HandleDeleteDomainMappingError = ({
    message: string;
});
type HandleListDomainVerificationRequestsResponse = (Array<{
    verificationCode: string;
    domain: string;
    createdAt: string;
}>);
type HandleListDomainVerificationRequestsError = ({
    message: string;
});
type HandleVerifyDomainData = {
    body: FreestyleVerifyDomainRequest;
};
type HandleVerifyDomainResponse = ({
    domain: string;
});
type HandleVerifyDomainError = ({
    message: string;
});
type HandleCreateDomainVerificationData = {
    body: FreestyleDomainVerificationRequest;
};
type HandleCreateDomainVerificationResponse = (DomainVerificationRequest);
type HandleCreateDomainVerificationError = ({
    message: string;
});
type HandleDeleteDomainVerificationData = {
    body: FreestyleDeleteDomainVerificationRequest;
};
type HandleDeleteDomainVerificationResponse = ({
    verificationCode: string;
    domain: string;
});
type HandleDeleteDomainVerificationError = ({
    message: string;
});
type HandleEphemeralDevServerData = {
    body: DevServerRequest;
};
type HandleEphemeralDevServerResponse = ({
    /**
     * @deprecated
     */
    url: string;
    isNew: boolean;
    devCommandRunning: boolean;
    installCommandRunning: boolean;
    mcpEphemeralUrl?: (string) | null;
    ephemeralUrl?: (string) | null;
});
type HandleEphemeralDevServerError = (InternalServerError);
type HandleExecOnEphemeralDevServerData = {
    body: ExecRequest;
};
type HandleExecOnEphemeralDevServerResponse = ({
    id: string;
    isNew: boolean;
    stdout?: Array<(string)> | null;
    stderr?: Array<(string)> | null;
});
type HandleExecOnEphemeralDevServerError = (InternalServerError);
type HandleWriteFileFromEphemeralDevServerData = {
    body: WriteFileRequest;
};
type HandleWriteFileFromEphemeralDevServerResponse = ({
    id: string;
    isNew: boolean;
});
type HandleWriteFileFromEphemeralDevServerError = (InternalServerError);
type HandleReadFileFromEphemeralDevServerData = {
    body: ReadFileRequest;
};
type HandleReadFileFromEphemeralDevServerResponse = ({
    id: string;
    isNew: boolean;
    content: ({
        content: string;
        encoding: string;
        kind: 'file';
    } | {
        files: Array<(string)>;
        kind: 'directory';
    });
});
type HandleReadFileFromEphemeralDevServerError = ({
    id: string;
    isNew: boolean;
} | InternalServerError);
type HandleGitCommitPushData = {
    body: GitCommitPushRequest;
};
type HandleGitCommitPushResponse = ({
    id: string;
    isNew: boolean;
});
type HandleGitCommitPushError = (InternalServerError);
type HandleShutdownDevServerData = {
    body: ShutdownDevServerRequest;
};
type HandleShutdownDevServerResponse = ({
    success: boolean;
    message: string;
});
type HandleShutdownDevServerError = ({
    message: string;
} | InternalServerError);
type HandleDevServerStatusData = {
    body: DevServerStatusRequest;
};
type HandleDevServerStatusResponse = ({
    installing: boolean;
    devRunning: boolean;
});
type HandleDevServerStatusError = (InternalServerError);
type HandleWatchDevServerFilesData = {
    body: DevServerWatchFilesRequest;
};
type HandleWatchDevServerFilesResponse = (string);
type HandleWatchDevServerFilesError = unknown;
type HandleListExecuteRunsData = {
    query?: {
        limit?: (number) | null;
        offset?: (number) | null;
    };
};
type HandleListExecuteRunsResponse = ({
    entries: Array<ExecuteLogEntry>;
    total: number;
    offset: number;
});
type HandleListExecuteRunsError = ({
    message: string;
});
type HandleGetExecuteRunData = {
    path: {
        deployment: string;
    };
};
type HandleGetExecuteRunResponse = ({
    metadata: ExecuteLogEntry;
    code: ExecuteRunInfo;
});
type HandleGetExecuteRunError = ({
    message: string;
});
type HandleExecuteScriptData = {
    body: FreestyleExecuteScriptParams;
};
type HandleExecuteScriptResponse = ({
    /**
     * The return value of the default export of the script
     */
    result: unknown;
    logs: Array<FreestyleJavaScriptLog>;
});
type HandleExecuteScriptError = ({
    error: string;
    logs?: Array<FreestyleJavaScriptLog> | null;
});
type HandleListIdentitiesData = {
    query?: {
        includeManaged?: (boolean) | null;
        limit?: (number) | null;
        offset?: (number) | null;
    };
};
type HandleListIdentitiesResponse = ({
    identities: Array<GitIdentity>;
    offset: number;
    total: number;
});
type HandleListIdentitiesError = ({
    message: string;
});
type HandleCreateIdentityResponse = (GitIdentity);
type HandleCreateIdentityError = ({
    message: string;
});
type HandleDeleteIdentityData = {
    path: {
        identity: string;
    };
};
type HandleDeleteIdentityResponse = ({
    [key: string]: unknown;
});
type HandleDeleteIdentityError = ({
    message: string;
});
type HandleListPermissionsData = {
    path: {
        identity: string;
    };
    query?: {
        /**
         * Maximum number of repositories to return
         */
        limit?: number;
        /**
         * Offset for the list of repositories
         */
        offset?: number;
    };
};
type HandleListPermissionsResponse = (ListPermissionResponseSuccess);
type HandleListPermissionsError = ({
    message: string;
});
type HandleDescribePermissionData = {
    path: {
        identity: string;
        repo: string;
    };
};
type HandleDescribePermissionResponse = (DescribePermissionResponseSuccess);
type HandleDescribePermissionError = ({
    message: string;
});
type HandleGrantPermissionData = {
    body: GrantPermissionRequest;
    path: {
        identity: string;
        repo: string;
    };
};
type HandleGrantPermissionResponse = ({
    [key: string]: unknown;
});
type HandleGrantPermissionError = ({
    message: string;
});
type HandleRevokePermissionData = {
    path: {
        identity: string;
        repo: string;
    };
};
type HandleRevokePermissionResponse = ({
    [key: string]: unknown;
});
type HandleRevokePermissionError = ({
    message: string;
});
type HandleUpdatePermissionData = {
    body: UpdatePermissionRequest;
    path: {
        identity: string;
        repo: string;
    };
};
type HandleUpdatePermissionResponse = ({
    [key: string]: unknown;
});
type HandleUpdatePermissionError = ({
    message: string;
});
type HandleListGitTokensData = {
    path: {
        identity: string;
    };
};
type HandleListGitTokensResponse = (ListGitTokensResponseSuccess);
type HandleListGitTokensError = ({
    message: string;
});
type HandleCreateGitTokenData = {
    path: {
        identity: string;
    };
};
type HandleCreateGitTokenResponse = (CreatedToken);
type HandleCreateGitTokenError = ({
    message: string;
});
type HandleRevokeGitTokenData = {
    body: RevokeGitTokenRequest;
    path: {
        identity: string;
    };
};
type HandleRevokeGitTokenResponse = ({
    [key: string]: unknown;
});
type HandleRevokeGitTokenError = ({
    message: string;
});
type HandleListRepositoriesData = {
    query?: {
        /**
         * Maximum number of repositories to return
         */
        limit?: number;
        /**
         * Offset for the list of repositories
         */
        offset?: number;
    };
};
type HandleListRepositoriesResponse = ({
    repositories: Array<RepositoryInfo>;
    total: number;
    offset: number;
});
type HandleListRepositoriesError = ({
    message: string;
});
type HandleCreateRepoData = {
    body: {
        /**
         * This name is not visible to users, and is only accessible to you via API and in the
         * dashboard. Mostly useful for observability.
         */
        name?: (string) | null;
        public?: boolean;
        source?: CreateRepoSource;
        import?: CreateRepoImport;
    };
};
type HandleCreateRepoResponse = (CreateRepositoryResponseSuccess);
type HandleCreateRepoError = ({
    message: string;
});
type HandleDeleteRepoData = {
    path: {
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleDeleteRepoResponse = ({
    [key: string]: unknown;
});
type HandleDeleteRepoError = ({
    message: string;
} | {
    [key: string]: unknown;
});
type HandleGetContentsData = {
    path: {
        /**
         * The path to the file or directory. Empty for root.
         */
        '*path': (string) | null;
        /**
         * The repository ID.
         */
        repo: string;
    };
    query?: {
        /**
         * The git reference (branch name, commit SHA, etc.). Defaults to HEAD.
         */
        ref?: string;
    };
};
type HandleGetContentsResponse = (GitContents);
type HandleGetContentsError = ({
    message: string;
});
type HandleGetBlobData = {
    path: {
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleGetBlobResponse = (BlobObject);
type HandleGetBlobError = ({
    message: string;
});
type HandleGetCommitData = {
    path: {
        /**
         * The object's hash
         */
        hash: string;
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleGetCommitResponse = (CommitObject);
type HandleGetCommitError = ({
    message: string;
});
type HandleGetRefBranchData = {
    path: {
        /**
         * The branch's name
         */
        branch: string;
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleGetRefBranchResponse = (GitReference);
type HandleGetRefBranchError = (unknown | {
    message: string;
});
type HandleGetRefTagData = {
    path: {
        /**
         * The repository id
         */
        repo: string;
        /**
         * The tag's name
         */
        tag: string;
    };
};
type HandleGetRefTagResponse = (GitReference);
type HandleGetRefTagError = (unknown | {
    message: string;
});
type HandleGetTagData = {
    path: {
        /**
         * The object's hash
         */
        hash: string;
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleGetTagResponse = (TagObject);
type HandleGetTagError = ({
    message: string;
});
type HandleGetTreeData = {
    path: {
        /**
         * The object's hash
         */
        hash: string;
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleGetTreeResponse = (TreeObject);
type HandleGetTreeError = ({
    message: string;
});
type HandleDownloadTarballData = {
    path: {
        /**
         * The repository id
         */
        repo: string;
    };
    query?: {
        /**
         * The git reference (branch name, commit SHA, etc.). Defaults to HEAD.
         */
        ref?: string;
    };
};
type HandleDownloadTarballResponse = (unknown);
type HandleDownloadTarballError = ({
    message: string;
});
type HandleListGitTriggersData = {
    path: {
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleListGitTriggersResponse = ({
    triggers: Array<GitRepositoryTrigger>;
});
type HandleListGitTriggersError = ({
    message: string;
});
type HandleCreateGitTriggerData = {
    body: {
        trigger: ({
            branches?: Array<(string)> | null;
            globs?: Array<(string)> | null;
            event: 'push';
        });
        action: ({
            endpoint: string;
            action: 'webhook';
        });
    };
    path: {
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleCreateGitTriggerResponse = ({
    triggerId: string;
});
type HandleCreateGitTriggerError = ({
    message: string;
});
type HandleDeleteGitTriggerData = {
    path: {
        /**
         * The trigger id
         */
        trigger: string;
    };
};
type HandleDeleteGitTriggerResponse = ({
    [key: string]: unknown;
});
type HandleDeleteGitTriggerError = ({
    message: string;
} | {
    [key: string]: unknown;
});
type HandleDownloadZipData = {
    path: {
        /**
         * The repository id
         */
        repo: string;
    };
    query?: {
        /**
         * The git reference (branch name, commit SHA, etc.). Defaults to HEAD.
         */
        ref?: string;
    };
};
type HandleDownloadZipResponse = (unknown);
type HandleDownloadZipError = ({
    message: string;
});
type HandleGetLogsData = {
    query?: {
        deploymentId?: (string) | null;
        domain?: (string) | null;
    };
};
type HandleGetLogsResponse = (FreestyleGetLogsResponse);
type HandleGetLogsError = unknown;
type HandleDeployWebData = {
    body: FreestyleDeployWebPayload;
};
type HandleDeployWebResponse = (FreestyleDeployWebSuccessResponseV2);
type HandleDeployWebError = (FreestyleDeployWebErrorResponse);
type HandleDeployWebV2Data = {
    body: FreestyleDeployWebPayloadV2;
};
type HandleDeployWebV2Response = (FreestyleDeployWebSuccessResponseV2);
type HandleDeployWebV2Error = (FreestyleDeployWebErrorResponse);
type HandleListWebDeploysData = {
    query: {
        /**
         * Maximum number of repositories to return
         */
        limit: number;
        /**
         * Offset for the list of repositories
         */
        offset: number;
    };
};
type HandleListWebDeploysResponse = ({
    entries: Array<DeploymentLogEntry>;
    total: number;
    offset: number;
});
type HandleListWebDeploysError = ({
    message: string;
});
type HandleGetWebDeployDetailsData = {
    path: {
        deployment_id: string;
    };
};

export type { kind as $, AccessLevel as A, GitTrigger as B, CreateRepoSource as C, DeploymentSource as D, GitTriggerAction as E, FreestyleExecuteScriptParamsConfiguration as F, GitIdentity as G, HandleBackupCloudstateResponse as H, HandleCreateGitTriggerResponse as I, DeploymentBuildOptions as J, AccessibleRepository as K, ListPermissionResponseSuccess as L, AccessTokenInfo as M, Behavior as N, BlobEncoding as O, BlobObject as P, CommitObject as Q, CommitParent as R, CommitTree as S, CreateDomainMappingRequest as T, CreateRecordParams as U, type as V, CreateRepoRequest as W, CreateRepositoryRequest as X, type2 as Y, CustomBuildOptions as Z, DeploymentLogEntry as _, FreestyleExecuteScriptResultSuccess as a, HandleListRecordsResponse as a$, DeploymentState as a0, DevServer as a1, kind2 as a2, DevServerRequest as a3, DevServerStatusRequest as a4, DevServerWatchFilesRequest as a5, DnsRecord as a6, DnsRecordData as a7, DnsRecordKind as a8, DomainVerificationRequest as a9, GitRepositoryTrigger as aA, event as aB, action2 as aC, GrantPermissionRequest as aD, InternalServerError as aE, ListRecordsResponse as aF, NetworkPermissionData as aG, ReadFileEphemeralDevServerResponses as aH, ReadFileRequest as aI, RepositoryInfo as aJ, RevokeGitTokenRequest as aK, ShutdownDevServerRequest as aL, Signature as aM, TagObject as aN, TagTarget as aO, TreeEntry as aP, type4 as aQ, TreeObject as aR, UpdatePermissionRequest as aS, Visibility as aT, WriteFileRequest as aU, HandleDeployCloudstateData as aV, HandleDeployCloudstateResponse as aW, HandleDeployCloudstateError as aX, HandleBackupCloudstateData as aY, HandleBackupCloudstateError as aZ, HandleListRecordsData as a_, ExecRequest as aa, ExecuteLogEntry as ab, ExecuteRunInfo as ac, ExecuteRunState as ad, FileReadContent as ae, kind3 as af, FreestyleCloudstateDeployConfiguration as ag, FreestyleCloudstateDeployErrorResponse as ah, FreestyleDeleteDomainVerificationRequest as ai, FreestyleDeployWebErrorResponse as aj, FreestyleDeployWebPayload as ak, FreestyleDeployWebPayloadV2 as al, FreestyleDomainVerificationRequest as am, FreestyleExecuteScriptParams as an, FreestyleFile as ao, FreestyleGetLogsResponse as ap, FreestyleJavaScriptLog as aq, FreestyleLogResponseObject as ar, FreestyleNetworkPermission as as, action as at, FreestyleVerifyDomainRequest as au, GitCommitPushRequest as av, GitContents as aw, type3 as ax, GitContentsDirEntryItem as ay, GitReference as az, FreestyleDeployWebConfiguration as b, HandleDescribePermissionData as b$, HandleListRecordsError as b0, HandleCreateRecordData as b1, HandleCreateRecordResponse as b2, HandleCreateRecordError as b3, HandleDeleteRecordData as b4, HandleDeleteRecordResponse as b5, HandleDeleteRecordError as b6, HandleVerifyWildcardData as b7, HandleVerifyWildcardError as b8, HandleListDomainsError as b9, HandleGitCommitPushError as bA, HandleShutdownDevServerData as bB, HandleShutdownDevServerResponse as bC, HandleShutdownDevServerError as bD, HandleDevServerStatusData as bE, HandleDevServerStatusResponse as bF, HandleDevServerStatusError as bG, HandleWatchDevServerFilesData as bH, HandleWatchDevServerFilesResponse as bI, HandleWatchDevServerFilesError as bJ, HandleListExecuteRunsData as bK, HandleListExecuteRunsError as bL, HandleGetExecuteRunData as bM, HandleGetExecuteRunError as bN, HandleExecuteScriptData as bO, HandleExecuteScriptResponse as bP, HandleExecuteScriptError as bQ, HandleListIdentitiesData as bR, HandleListIdentitiesResponse as bS, HandleListIdentitiesError as bT, HandleCreateIdentityResponse as bU, HandleCreateIdentityError as bV, HandleDeleteIdentityData as bW, HandleDeleteIdentityError as bX, HandleListPermissionsData as bY, HandleListPermissionsResponse as bZ, HandleListPermissionsError as b_, HandleInsertDomainMappingData as ba, HandleInsertDomainMappingResponse as bb, HandleInsertDomainMappingError as bc, HandleDeleteDomainMappingData as bd, HandleDeleteDomainMappingResponse as be, HandleDeleteDomainMappingError as bf, HandleListDomainVerificationRequestsError as bg, HandleVerifyDomainData as bh, HandleCreateDomainVerificationData as bi, HandleCreateDomainVerificationError as bj, HandleDeleteDomainVerificationData as bk, HandleDeleteDomainVerificationError as bl, HandleEphemeralDevServerData as bm, HandleEphemeralDevServerResponse as bn, HandleEphemeralDevServerError as bo, HandleExecOnEphemeralDevServerData as bp, HandleExecOnEphemeralDevServerResponse as bq, HandleExecOnEphemeralDevServerError as br, HandleWriteFileFromEphemeralDevServerData as bs, HandleWriteFileFromEphemeralDevServerResponse as bt, HandleWriteFileFromEphemeralDevServerError as bu, HandleReadFileFromEphemeralDevServerData as bv, HandleReadFileFromEphemeralDevServerResponse as bw, HandleReadFileFromEphemeralDevServerError as bx, HandleGitCommitPushData as by, HandleGitCommitPushResponse as bz, FreestyleDeployWebSuccessResponseV2 as c, HandleDeployWebResponse as c$, HandleDescribePermissionResponse as c0, HandleDescribePermissionError as c1, HandleGrantPermissionData as c2, HandleGrantPermissionError as c3, HandleRevokePermissionData as c4, HandleRevokePermissionResponse as c5, HandleRevokePermissionError as c6, HandleUpdatePermissionData as c7, HandleUpdatePermissionResponse as c8, HandleUpdatePermissionError as c9, HandleGetRefBranchResponse as cA, HandleGetRefBranchError as cB, HandleGetRefTagData as cC, HandleGetRefTagResponse as cD, HandleGetRefTagError as cE, HandleGetTagData as cF, HandleGetTagResponse as cG, HandleGetTagError as cH, HandleGetTreeData as cI, HandleGetTreeResponse as cJ, HandleGetTreeError as cK, HandleDownloadTarballData as cL, HandleDownloadTarballResponse as cM, HandleDownloadTarballError as cN, HandleListGitTriggersData as cO, HandleListGitTriggersError as cP, HandleCreateGitTriggerData as cQ, HandleCreateGitTriggerError as cR, HandleDeleteGitTriggerData as cS, HandleDeleteGitTriggerResponse as cT, HandleDeleteGitTriggerError as cU, HandleDownloadZipData as cV, HandleDownloadZipResponse as cW, HandleDownloadZipError as cX, HandleGetLogsData as cY, HandleGetLogsError as cZ, HandleDeployWebData as c_, HandleListGitTokensData as ca, HandleListGitTokensResponse as cb, HandleListGitTokensError as cc, HandleCreateGitTokenData as cd, HandleCreateGitTokenResponse as ce, HandleCreateGitTokenError as cf, HandleRevokeGitTokenData as cg, HandleRevokeGitTokenResponse as ch, HandleRevokeGitTokenError as ci, HandleListRepositoriesData as cj, HandleListRepositoriesError as ck, HandleCreateRepoData as cl, HandleCreateRepoResponse as cm, HandleCreateRepoError as cn, HandleDeleteRepoData as co, HandleDeleteRepoError as cp, HandleGetContentsData as cq, HandleGetContentsResponse as cr, HandleGetContentsError as cs, HandleGetBlobData as ct, HandleGetBlobResponse as cu, HandleGetBlobError as cv, HandleGetCommitData as cw, HandleGetCommitResponse as cx, HandleGetCommitError as cy, HandleGetRefBranchData as cz, FreestyleCloudstateDeployRequest as d, HandleDeployWebError as d0, HandleDeployWebV2Data as d1, HandleDeployWebV2Response as d2, HandleDeployWebV2Error as d3, HandleListWebDeploysData as d4, HandleListWebDeploysError as d5, HandleGetWebDeployDetailsData as d6, FreestyleCloudstateDeploySuccessResponse as e, HandleGetLogsResponse as f, HandleCreateDomainVerificationResponse as g, HandleVerifyDomainResponse as h, HandleVerifyDomainError as i, HandleListDomainsResponse as j, HandleListDomainVerificationRequestsResponse as k, HandleDeleteDomainVerificationResponse as l, HandleListWebDeploysResponse as m, HandleListExecuteRunsResponse as n, HandleGetExecuteRunResponse as o, HandleVerifyWildcardResponse as p, CreateRepoImport as q, CreateRepositoryResponseSuccess as r, HandleListRepositoriesResponse as s, HandleDeleteRepoResponse as t, HandleDeleteIdentityResponse as u, HandleGrantPermissionResponse as v, DescribePermissionResponseSuccess as w, CreatedToken as x, ListGitTokensResponseSuccess as y, HandleListGitTriggersResponse as z };
