type DeploymentLogEntry = {
    deploymentId: string;
    accountId: string;
    provisionedAt: string;
    timeout: string;
    state: DeploymentState;
    deployedAt?: (string) | null;
    domains: Array<(string)>;
    envVars: {
        [key: string]: (string);
    };
};
type DeploymentState = 'provisioning' | 'deployed' | 'failed';
type ExecuteLogEntry = {
    deployment: string;
    account_id: string;
    provisioned_at: string;
    started_at?: (string) | null;
    duration?: (string) | null;
    state: ExecuteRunState;
    env_vars: {
        [key: string]: (string);
    };
};
type ExecuteRunState = 'starting' | 'running' | 'complete';
type FreestyleCloudstateDeployConfiguration = {
    /**
     * ID of the project to deploy, if not provided will create a new project
     */
    domains?: Array<(string)> | null;
    /**
     * The environment variables that the cloudstate deploy can access
     */
    envVars?: {
        [key: string]: (string);
    };
    cloudstateDatabaseId?: (string) | null;
};
type FreestyleCloudstateDeployErrorResponse = {
    message: string;
};
type FreestyleCloudstateDeployRequest = {
    classes: string;
    config?: FreestyleCloudstateDeployConfiguration;
};
type FreestyleCloudstateDeploySuccessResponse = {
    deploymentId: string;
    cloudstateDatabaseId: string;
};
type FreestyleDeleteDomainVerificationRequest = {
    /**
     * The domain to create a verification code for
     */
    domain: string;
    /**
     * The verification code
     */
    verificationCode: string;
};
type FreestyleDeployWebConfiguration = {
    /**
     * The entrypoint file for the website
     */
    entrypoint?: (string) | null;
    /**
     * The custom domains for the website, eg. [\"subdomain.yourwebsite.com\"]. You may include a single *.style.dev domain here.
     */
    domains?: Array<(string)> | null;
    /**
     * Project ID was our original way of tracking deployments together, it is now deprecated and will be removed in the future. Please use the domains field to specify the domains for your project.
     * @deprecated
     */
    projectId?: (string) | null;
    /**
     * Node Modules to install for the website, a map of package names to versions, e.g. { \"express\": \"4.17.1\" }. If this and a package-lock.json are provided, the package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock is also provided, the versions here will override the versions in those lock files.
     */
    nodeModules?: {
        [key: string]: (string);
    } | null;
    /**
     * The environment variables that the website can access
     * e.g. { \"RESEND_API_KEY\": \"re_123456789\" }
     */
    envVars?: {
        [key: string]: (string);
    } | null;
    serverStartCheck?: boolean;
};
type FreestyleDeployWebErrorResponse = {
    message: string;
};
type FreestyleDeployWebPayload = {
    /**
     * The files to deploy, a map of file paths to file contents, e.g. { \"index.js\": {\"content\": \"your main\", \"encoding\": \"utf-8\"}, \"file2.js\": {\"content\": \"your helper\" } }
     *
     * **Do not include node modules in this bundle, they will not work**. Instead, includes a package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock, the node modules for the project will be installed from that lock file, or use the node_modules field in the configuration to specify the node modules to install.
     */
    files: {
        [key: string]: FreestyleFile;
    };
    config?: FreestyleDeployWebConfiguration;
};
type FreestyleDeployWebSuccessResponse = {
    deploymentId: string;
    domains?: Array<(string)> | null;
    /**
     * @deprecated
     */
    projectId?: (string) | null;
};
type FreestyleDomainVerificationRequest = {
    /**
     * The domain to create a verification code for
     */
    domain: string;
};
type FreestyleExecuteScriptParams = {
    /**
     * The JavaScript or TypeScript script to execute
     */
    script: string;
    config?: FreestyleExecuteScriptParamsConfiguration;
};
type FreestyleExecuteScriptParamsConfiguration = {
    /**
     * The environment variables to set for the script
     */
    envVars?: {
        [key: string]: (string);
    };
    /**
     * The node modules to install for the script
     */
    nodeModules?: {
        [key: string]: (string);
    };
    /**
     * Tags for you to organize your scripts, useful for tracking what you're running
     */
    tags?: Array<(string)>;
    /**
     * The script timeout
     */
    timeout?: (string) | null;
    /**
     * If false, we'll not resolve peer dependencies for the packages given, this can speed up execute performance, but will break packages with peers unless the peers are manually specified.
     */
    peerDependencyResolution?: boolean;
};
type FreestyleExecuteScriptResultSuccess = {
    result: unknown;
    logs: Array<FreestyleJavaScriptLog>;
};
type FreestyleFile = {
    /**
     * The content of the file
     */
    content: string;
    /**
     * The encoding of the file. Either **utf-8** or **base64**
     */
    encoding?: string;
};
type FreestyleJavaScriptLog = {
    /**
     * The log message
     */
    message: string;
    /**
     * The log level
     */
    type: string;
};
type FreestyleLogResponseObject = {
    message: string;
    timestamp: string;
};
type FreestyleVerifyDomainRequest = {
    domain: string;
};
type HandleDeployCloudstateData = {
    body: FreestyleCloudstateDeployRequest;
};
type HandleDeployCloudstateResponse = (FreestyleCloudstateDeploySuccessResponse);
type HandleDeployCloudstateError = (FreestyleCloudstateDeployErrorResponse);
type HandleBackupCloudstateData = {
    path: {
        id: string;
    };
};
type HandleBackupCloudstateResponse = (Array<(number)>);
type HandleBackupCloudstateError = (unknown);
type HandleVerifyWildcardResponse = ({
    domain: string;
});
type HandleVerifyWildcardError = ({
    message: string;
});
type HandleListDomainsResponse = (Array<{
    domain: string;
    createdAt: number;
}>);
type HandleListDomainsError = ({
    message: string;
});
type HandleListDomainVerificationRequestsResponse = (Array<{
    verificationCode: string;
    domain: string;
    createdAt: number;
}>);
type HandleListDomainVerificationRequestsError = ({
    message: string;
});
type HandleVerifyDomainData = {
    body: FreestyleVerifyDomainRequest;
};
type HandleVerifyDomainResponse = ({
    domain: string;
});
type HandleVerifyDomainError = ({
    message: string;
});
type HandleCreateDomainVerificationData = {
    body: FreestyleDomainVerificationRequest;
};
type HandleCreateDomainVerificationResponse = ({
    verificationCode: string;
    domain: string;
});
type HandleCreateDomainVerificationError = ({
    message: string;
});
type HandleDeleteDomainVerificationData = {
    body: FreestyleDeleteDomainVerificationRequest;
};
type HandleDeleteDomainVerificationResponse = ({
    verificationCode: string;
    domain: string;
});
type HandleDeleteDomainVerificationError = ({
    message: string;
});
type HandleListExecuteRunsData = {
    query?: {
        limit?: (number) | null;
        offset?: (number) | null;
    };
};
type HandleListExecuteRunsResponse = ({
    entries: Array<ExecuteLogEntry>;
    total: number;
    offset: number;
});
type HandleListExecuteRunsError = ({
    message: string;
});
type HandleGetExecuteRunData = {
    path: {
        deployment: string;
    };
};
type HandleGetExecuteRunResponse = (ExecuteLogEntry);
type HandleGetExecuteRunError = ({
    message: string;
});
type HandleExecuteScriptData = {
    body: FreestyleExecuteScriptParams;
};
type HandleExecuteScriptResponse = ({
    result: unknown;
    logs: Array<FreestyleJavaScriptLog>;
});
type HandleExecuteScriptError = ({
    error: string;
});
type HandleGetLogsData = {
    query: {
        deploymentId: string;
    };
};
type HandleGetLogsResponse = (Array<FreestyleLogResponseObject>);
type HandleGetLogsError = unknown;
type HandleDeployWebData = {
    body: FreestyleDeployWebPayload;
};
type HandleDeployWebResponse = (FreestyleDeployWebSuccessResponse);
type HandleDeployWebError = (FreestyleDeployWebErrorResponse);
type HandleListWebDeploysResponse = ({
    entries: Array<DeploymentLogEntry>;
    total: number;
    offset: number;
});
type HandleListWebDeploysError = ({
    message: string;
});

export type { HandleGetLogsData as $, FreestyleJavaScriptLog as A, FreestyleLogResponseObject as B, FreestyleVerifyDomainRequest as C, DeploymentLogEntry as D, ExecuteLogEntry as E, FreestyleExecuteScriptParamsConfiguration as F, HandleDeployCloudstateData as G, HandleBackupCloudstateResponse as H, HandleDeployCloudstateResponse as I, HandleDeployCloudstateError as J, HandleBackupCloudstateData as K, HandleBackupCloudstateError as L, HandleVerifyWildcardError as M, HandleListDomainsError as N, HandleListDomainVerificationRequestsError as O, HandleVerifyDomainData as P, HandleCreateDomainVerificationData as Q, HandleCreateDomainVerificationError as R, HandleDeleteDomainVerificationData as S, HandleDeleteDomainVerificationError as T, HandleListExecuteRunsData as U, HandleListExecuteRunsError as V, HandleGetExecuteRunData as W, HandleGetExecuteRunError as X, HandleExecuteScriptData as Y, HandleExecuteScriptResponse as Z, HandleExecuteScriptError as _, FreestyleExecuteScriptResultSuccess as a, HandleGetLogsError as a0, HandleDeployWebData as a1, HandleDeployWebResponse as a2, HandleDeployWebError as a3, HandleListWebDeploysError as a4, FreestyleDeployWebConfiguration as b, FreestyleDeployWebSuccessResponse as c, FreestyleCloudstateDeployRequest as d, FreestyleCloudstateDeploySuccessResponse as e, HandleGetLogsResponse as f, HandleCreateDomainVerificationResponse as g, HandleVerifyDomainResponse as h, HandleVerifyDomainError as i, HandleListDomainsResponse as j, HandleListDomainVerificationRequestsResponse as k, HandleDeleteDomainVerificationResponse as l, HandleListWebDeploysResponse as m, HandleListExecuteRunsResponse as n, HandleGetExecuteRunResponse as o, HandleVerifyWildcardResponse as p, DeploymentState as q, ExecuteRunState as r, FreestyleCloudstateDeployConfiguration as s, FreestyleCloudstateDeployErrorResponse as t, FreestyleDeleteDomainVerificationRequest as u, FreestyleDeployWebErrorResponse as v, FreestyleDeployWebPayload as w, FreestyleDomainVerificationRequest as x, FreestyleExecuteScriptParams as y, FreestyleFile as z };
