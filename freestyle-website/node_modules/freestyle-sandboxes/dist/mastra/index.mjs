import { z } from 'zod';
import { e as executeCodeDescription, a as executeCodeSchema } from '../index-BKAG8L-o.mjs';
import { FreestyleSandboxes } from '../index.mjs';
import '@hey-api/client-fetch';

var Tool = class {
  id;
  description;
  inputSchema;
  outputSchema;
  execute;
  mastra;
  constructor(opts) {
    this.id = opts.id;
    this.description = opts.description;
    this.inputSchema = opts.inputSchema;
    this.outputSchema = opts.outputSchema;
    this.execute = opts.execute;
    this.mastra = opts.mastra;
  }
};
function createTool(opts) {
  return new Tool(opts);
}

const executeTool = (config) => {
  const description = executeCodeDescription(
    Object.keys(config.envVars ?? {}).join(", "),
    Object.keys(config.nodeModules ?? {}).join(", ")
  );
  const client = new FreestyleSandboxes({
    apiKey: config.apiKey
  });
  return createTool({
    id: "Execute a TypeScript or JavaScript Script",
    description,
    execute: async ({ context: { script } }) => {
      return await client.executeScript(script, config);
    },
    inputSchema: executeCodeSchema,
    outputSchema: z.object({
      logs: z.array(
        z.object({
          message: z.string(),
          type: z.string()
        })
      ),
      result: z.unknown()
    })
  });
};

export { executeTool };
