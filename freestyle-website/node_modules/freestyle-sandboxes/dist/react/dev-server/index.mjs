import { QueryClient, QueryClientProvider, useQuery } from '@tanstack/react-query';
import React from 'react';

const queryClient = new QueryClient();
function DefaultLoadingComponent({
  installCommandRunning
}) {
  let loadingText = "Starting container...";
  if (installCommandRunning) {
    loadingText = "Installing dependencies...";
  } else {
    loadingText = "Starting dev server...";
  }
  return /* @__PURE__ */ React.createElement(
    "div",
    {
      style: {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        height: "100%"
      }
    },
    loadingText
  );
}
const FreestyleDevServer = React.forwardRef(({ loadingComponent, actions, repoId }, ref) => {
  return /* @__PURE__ */ React.createElement(QueryClientProvider, { client: queryClient }, /* @__PURE__ */ React.createElement(
    FreestyleDevServerInner,
    {
      ref,
      loadingComponent: loadingComponent ?? DefaultLoadingComponent,
      repoId,
      actions
    }
  ));
});
const FreestyleDevServerInner = React.forwardRef(({ repoId, loadingComponent, actions: { requestDevServer } }, ref) => {
  const { data, isLoading } = useQuery({
    queryKey: ["dev-server", repoId],
    queryFn: async () => await requestDevServer({ repoId }),
    refetchInterval: 1e3
  });
  const iframeRef = React.useRef(null);
  const [wasLoaded, setWasLoaded] = React.useState(false);
  const [iframeLoaded, setIframeLoaded] = React.useState(false);
  const refreshIframe = React.useCallback(() => {
    if (iframeRef.current && data?.ephemeralUrl) {
      setIframeLoaded(false);
      const currentSrc = iframeRef.current.src;
      iframeRef.current.src = "";
      setTimeout(() => {
        if (iframeRef.current) {
          iframeRef.current.src = currentSrc;
        }
      }, 50);
    }
  }, [data?.ephemeralUrl]);
  React.useImperativeHandle(
    ref,
    () => ({
      refresh: refreshIframe
    }),
    [refreshIframe]
  );
  React.useMemo(() => {
    if (data?.devCommandRunning) {
      setWasLoaded(true);
    }
  }, [isLoading, data?.devCommandRunning]);
  React.useEffect(() => {
    function loadHandle() {
      setIframeLoaded(true);
    }
    iframeRef.current?.addEventListener("load", loadHandle);
    return () => {
      iframeRef.current?.removeEventListener("load", loadHandle);
    };
  }, []);
  if (isLoading) {
    return loadingComponent({
      devCommandRunning: false,
      installCommandRunning: false,
      serverStarting: true,
      iframeLoading: false
    });
  }
  if (!data?.devCommandRunning && !wasLoaded) {
    return loadingComponent({
      devCommandRunning: data?.devCommandRunning ?? false,
      installCommandRunning: data?.installCommandRunning ?? false,
      serverStarting: false,
      iframeLoading: false
    });
  }
  return /* @__PURE__ */ React.createElement(
    "div",
    {
      style: {
        display: "grid",
        gridTemplateRows: "1fr",
        gridTemplateColumns: "1fr",
        width: "100%",
        height: "100%"
      }
    },
    /* @__PURE__ */ React.createElement(
      "div",
      {
        style: {
          width: "100%",
          height: "100%",
          border: "none",
          gridColumn: "1 / -1",
          gridRow: "1 / -1",
          visibility: iframeLoaded ? "hidden" : "visible"
        }
      },
      loadingComponent({
        devCommandRunning: data?.devCommandRunning ?? false,
        installCommandRunning: data?.installCommandRunning ?? false,
        serverStarting: false,
        iframeLoading: true
      })
    ),
    /* @__PURE__ */ React.createElement(
      "iframe",
      {
        ref: iframeRef,
        sandbox: "allow-scripts allow-same-origin allow-forms",
        src: data.ephemeralUrl,
        style: {
          width: "100%",
          height: "100%",
          border: "none",
          gridColumn: "1 / -1",
          gridRow: "1 / -1"
        }
      }
    )
  );
});

export { DefaultLoadingComponent, FreestyleDevServer };
