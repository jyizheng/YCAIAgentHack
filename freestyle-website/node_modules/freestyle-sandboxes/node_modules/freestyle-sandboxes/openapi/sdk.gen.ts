// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { HandleDeployCloudstateData, HandleDeployCloudstateError, HandleDeployCloudstateResponse, HandleBackupCloudstateData, HandleBackupCloudstateError, HandleBackupCloudstateResponse, HandleListRecordsData, HandleListRecordsError, HandleListRecordsResponse, HandleCreateRecordData, HandleCreateRecordError, HandleCreateRecordResponse, HandleDeleteRecordData, HandleDeleteRecordError, HandleDeleteRecordResponse, HandleVerifyWildcardData, HandleVerifyWildcardError, HandleVerifyWildcardResponse, HandleListDomainsError, HandleListDomainsResponse, HandleInsertDomainMappingData, HandleInsertDomainMappingError, HandleInsertDomainMappingResponse, HandleDeleteDomainMappingData, HandleDeleteDomainMappingError, HandleDeleteDomainMappingResponse, HandleListDomainVerificationRequestsError, HandleListDomainVerificationRequestsResponse, HandleVerifyDomainData, HandleVerifyDomainError, HandleVerifyDomainResponse, HandleCreateDomainVerificationData, HandleCreateDomainVerificationError, HandleCreateDomainVerificationResponse, HandleDeleteDomainVerificationData, HandleDeleteDomainVerificationError, HandleDeleteDomainVerificationResponse, HandleEphemeralDevServerData, HandleEphemeralDevServerError, HandleEphemeralDevServerResponse, HandleExecOnEphemeralDevServerData, HandleExecOnEphemeralDevServerError, HandleExecOnEphemeralDevServerResponse, HandleWriteFileFromEphemeralDevServerData, HandleWriteFileFromEphemeralDevServerError, HandleWriteFileFromEphemeralDevServerResponse, HandleReadFileFromEphemeralDevServerData, HandleReadFileFromEphemeralDevServerError, HandleReadFileFromEphemeralDevServerResponse, HandleGitCommitPushData, HandleGitCommitPushError, HandleGitCommitPushResponse, HandleDevServerStatusData, HandleDevServerStatusError, HandleDevServerStatusResponse, HandleListExecuteRunsData, HandleListExecuteRunsError, HandleListExecuteRunsResponse, HandleGetExecuteRunData, HandleGetExecuteRunError, HandleGetExecuteRunResponse, HandleExecuteScriptData, HandleExecuteScriptError, HandleExecuteScriptResponse, HandleListIdentitiesData, HandleListIdentitiesError, HandleListIdentitiesResponse, HandleCreateIdentityError, HandleCreateIdentityResponse, HandleDeleteIdentityData, HandleDeleteIdentityError, HandleDeleteIdentityResponse, HandleListPermissionsData, HandleListPermissionsError, HandleListPermissionsResponse, HandleDescribePermissionData, HandleDescribePermissionError, HandleDescribePermissionResponse, HandleGrantPermissionData, HandleGrantPermissionError, HandleGrantPermissionResponse, HandleRevokePermissionData, HandleRevokePermissionError, HandleRevokePermissionResponse, HandleUpdatePermissionData, HandleUpdatePermissionError, HandleUpdatePermissionResponse, HandleListGitTokensData, HandleListGitTokensError, HandleListGitTokensResponse, HandleCreateGitTokenData, HandleCreateGitTokenError, HandleCreateGitTokenResponse, HandleRevokeGitTokenData, HandleRevokeGitTokenError, HandleRevokeGitTokenResponse, HandleListRepositoriesData, HandleListRepositoriesError, HandleListRepositoriesResponse, HandleCreateRepoData, HandleCreateRepoError, HandleCreateRepoResponse, HandleGetBlobData, HandleGetBlobError, HandleGetBlobResponse, HandleGetCommitData, HandleGetCommitError, HandleGetCommitResponse, HandleGetTagData, HandleGetTagError, HandleGetTagResponse, HandleGetTreeData, HandleGetTreeError, HandleGetTreeResponse, HandleDeleteRepoData, HandleDeleteRepoError, HandleDeleteRepoResponse, HandleListGitTriggersData, HandleListGitTriggersError, HandleListGitTriggersResponse, HandleCreateGitTriggerData, HandleCreateGitTriggerError, HandleCreateGitTriggerResponse, HandleDeleteGitTriggerData, HandleDeleteGitTriggerError, HandleDeleteGitTriggerResponse, HandleGetLogsData, HandleGetLogsError, HandleGetLogsResponse, HandleDeployWebData, HandleDeployWebError, HandleDeployWebResponse, HandleDeployWebV2Data, HandleDeployWebV2Error, HandleDeployWebV2Response, HandleListWebDeploysData, HandleListWebDeploysError, HandleListWebDeploysResponse, HandleGetWebDeployDetailsData } from './types.gen';

export const client = createClient(createConfig());

/**
 * Deploy Cloudstate Project
 * Deploy a cloudstate project
 */
export const handleDeployCloudstate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDeployCloudstateData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleDeployCloudstateResponse, HandleDeployCloudstateError, ThrowOnError>({
        ...options,
        url: '/cloudstate/v1/deploy'
    });
};

/**
 * Get Backup of Cloudstate Project
 * Get a backup of a cloudstate project
 */
export const handleBackupCloudstate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleBackupCloudstateData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleBackupCloudstateResponse, HandleBackupCloudstateError, ThrowOnError>({
        ...options,
        url: '/cloudstate/v1/projects/{id}/backup'
    });
};

/**
 * List DNS Records
 */
export const handleListRecords = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleListRecordsData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListRecordsResponse, HandleListRecordsError, ThrowOnError>({
        ...options,
        url: '/dns/v1/records'
    });
};

/**
 * Create DNS Record
 */
export const handleCreateRecord = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleCreateRecordData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleCreateRecordResponse, HandleCreateRecordError, ThrowOnError>({
        ...options,
        url: '/dns/v1/records'
    });
};

/**
 * Delete DNS Record
 */
export const handleDeleteRecord = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDeleteRecordData, ThrowOnError>) => {
    return (options?.client ?? client).delete<HandleDeleteRecordResponse, HandleDeleteRecordError, ThrowOnError>({
        ...options,
        url: '/dns/v1/records'
    });
};

/**
 * Provision a wildcard certificate
 * Provisions a wildcard certificate for a verified domain
 *
 *
 * This speeds up deploys on all subdomains of the domain. In order to use it, you must add the following record to your DNS config:
 *
 * `_acme-challenge.yourdomain.com` NS `dns.freestyle.sh`
 */
export const handleVerifyWildcard = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleVerifyWildcardData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleVerifyWildcardResponse, HandleVerifyWildcardError, ThrowOnError>({
        ...options,
        url: '/domains/v1/certs/{domain}/wildcard'
    });
};

/**
 * List domains for an account
 * This lists the domains that an account has verified ownership of. This includes the *.style.dev domains the account has claimed.
 */
export const handleListDomains = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListDomainsResponse, HandleListDomainsError, ThrowOnError>({
        ...options,
        url: '/domains/v1/domains'
    });
};

/**
 * Insert Domain Mapping
 * This will unmap any other deployment to this domain
 */
export const handleInsertDomainMapping = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleInsertDomainMappingData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleInsertDomainMappingResponse, HandleInsertDomainMappingError, ThrowOnError>({
        ...options,
        url: '/domains/v1/mappings/{domain}'
    });
};

/**
 * Remove Domain Mapping
 */
export const handleDeleteDomainMapping = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDeleteDomainMappingData, ThrowOnError>) => {
    return (options?.client ?? client).delete<HandleDeleteDomainMappingResponse, HandleDeleteDomainMappingError, ThrowOnError>({
        ...options,
        url: '/domains/v1/mappings/{domain}'
    });
};

/**
 * List domain verification requests for an account
 * Lists domain verification requests for the current account.
 */
export const handleListDomainVerificationRequests = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListDomainVerificationRequestsResponse, HandleListDomainVerificationRequestsError, ThrowOnError>({
        ...options,
        url: '/domains/v1/verifications'
    });
};

/**
 * Verify a domain verification request
 * This checks a pre-existing verification request for a domain. To create a verification request, call the [create domain verification](/#tag/domains/POST/domains/v1/verifications) endpoint. This endpoint will check if the domain has a TXT record with the verification code. If it does, the domain will be verified.
 */
export const handleVerifyDomain = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleVerifyDomainData, ThrowOnError>) => {
    return (options?.client ?? client).put<HandleVerifyDomainResponse, HandleVerifyDomainError, ThrowOnError>({
        ...options,
        url: '/domains/v1/verifications'
    });
};

/**
 * Create a domain verification request
 * This creates a Freestyle Domain Verification Request. It returns a `verificationCode` for your domain. You need to place this code in a TXT record at `_freestyle_custom_hostname.thedomain.com`, then call the [verify domain](/#tag/domains/PUT/domains/v1/verifications) endpoint with the domain to verify it.
 */
export const handleCreateDomainVerification = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleCreateDomainVerificationData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleCreateDomainVerificationResponse, HandleCreateDomainVerificationError, ThrowOnError>({
        ...options,
        url: '/domains/v1/verifications'
    });
};

/**
 * Delete a domain verification request
 * This deletes a Freestyle Domain Verification Request. This does not remove the domain from the account if it has already been verified, however the verification code will no longer be valid.
 */
export const handleDeleteDomainVerification = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDeleteDomainVerificationData, ThrowOnError>) => {
    return (options?.client ?? client).delete<HandleDeleteDomainVerificationResponse, HandleDeleteDomainVerificationError, ThrowOnError>({
        ...options,
        url: '/domains/v1/verifications'
    });
};

/**
 * Request a Dev Server
 */
export const handleEphemeralDevServer = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleEphemeralDevServerData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleEphemeralDevServerResponse, HandleEphemeralDevServerError, ThrowOnError>({
        ...options,
        url: '/ephemeral/v1/dev-servers'
    });
};

/**
 * Execute a command on a Dev Server
 */
export const handleExecOnEphemeralDevServer = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleExecOnEphemeralDevServerData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleExecOnEphemeralDevServerResponse, HandleExecOnEphemeralDevServerError, ThrowOnError>({
        ...options,
        url: '/ephemeral/v1/dev-servers/exec'
    });
};

/**
 * Write a file to a Dev Server
 */
export const handleWriteFileFromEphemeralDevServer = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleWriteFileFromEphemeralDevServerData, ThrowOnError>) => {
    return (options?.client ?? client).put<HandleWriteFileFromEphemeralDevServerResponse, HandleWriteFileFromEphemeralDevServerError, ThrowOnError>({
        ...options,
        url: '/ephemeral/v1/dev-servers/files/{*filepath}'
    });
};

/**
 * Read a file from a Dev Server
 */
export const handleReadFileFromEphemeralDevServer = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleReadFileFromEphemeralDevServerData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleReadFileFromEphemeralDevServerResponse, HandleReadFileFromEphemeralDevServerError, ThrowOnError>({
        ...options,
        url: '/ephemeral/v1/dev-servers/files/{*filepath}'
    });
};

/**
 * Commit and push changes to a Dev Server repository
 */
export const handleGitCommitPush = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleGitCommitPushData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleGitCommitPushResponse, HandleGitCommitPushError, ThrowOnError>({
        ...options,
        url: '/ephemeral/v1/dev-servers/git/commit-push'
    });
};

/**
 * Get the status of a Dev Server
 */
export const handleDevServerStatus = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDevServerStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleDevServerStatusResponse, HandleDevServerStatusError, ThrowOnError>({
        ...options,
        url: '/ephemeral/v1/dev-servers/status'
    });
};

/**
 * List execute runs
 * List execute runs.
 */
export const handleListExecuteRuns = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<HandleListExecuteRunsData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListExecuteRunsResponse, HandleListExecuteRunsError, ThrowOnError>({
        ...options,
        url: '/execute/v1/deployments'
    });
};

/**
 * Get information on execute run
 * Get information on execute run
 */
export const handleGetExecuteRun = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleGetExecuteRunData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleGetExecuteRunResponse, HandleGetExecuteRunError, ThrowOnError>({
        ...options,
        url: '/execute/v1/deployments/{deployment}'
    });
};

/**
 * Execute Code
 * Send a TypeScript or JavaScript module, get the result
 */
export const handleExecuteScript = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleExecuteScriptData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleExecuteScriptResponse, HandleExecuteScriptError, ThrowOnError>({
        ...options,
        url: '/execute/v1/script'
    });
};

/**
 * List Git identities
 * List Git identities created by your account.
 */
export const handleListIdentities = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<HandleListIdentitiesData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListIdentitiesResponse, HandleListIdentitiesError, ThrowOnError>({
        ...options,
        url: '/git/v1/identity'
    });
};

/**
 * Create a Git identity
 * Create a Git identity. This identity will be used to authenticate with the Git server.
 */
export const handleCreateIdentity = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleCreateIdentityResponse, HandleCreateIdentityError, ThrowOnError>({
        ...options,
        url: '/git/v1/identity'
    });
};

/**
 * Delete a Git identity
 * Delete a Git identity. This will revoke all permissions granted to this identity.
 */
export const handleDeleteIdentity = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDeleteIdentityData, ThrowOnError>) => {
    return (options?.client ?? client).delete<HandleDeleteIdentityResponse, HandleDeleteIdentityError, ThrowOnError>({
        ...options,
        url: '/git/v1/identity/{identity}'
    });
};

/**
 * List repository permissions for an identity
 * List repository permissions for an identity. This will return a list of repositories that the identity has access to.
 */
export const handleListPermissions = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleListPermissionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListPermissionsResponse, HandleListPermissionsError, ThrowOnError>({
        ...options,
        url: '/git/v1/identity/{identity}/permissions'
    });
};

/**
 * Get the permission of an identity on a repository
 * Get the permission of an identity on a repository. This will return the access level of the identity on the repository.
 */
export const handleDescribePermission = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDescribePermissionData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleDescribePermissionResponse, HandleDescribePermissionError, ThrowOnError>({
        ...options,
        url: '/git/v1/identity/{identity}/permissions/{repo}'
    });
};

/**
 * Grant a permission to a Git identity
 * Grant a permission to a Git identity on a repository
 */
export const handleGrantPermission = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleGrantPermissionData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleGrantPermissionResponse, HandleGrantPermissionError, ThrowOnError>({
        ...options,
        url: '/git/v1/identity/{identity}/permissions/{repo}'
    });
};

/**
 * Revoke permissions from a Git identity
 * Revoke a permission to a Git identity on a repository
 */
export const handleRevokePermission = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleRevokePermissionData, ThrowOnError>) => {
    return (options?.client ?? client).delete<HandleRevokePermissionResponse, HandleRevokePermissionError, ThrowOnError>({
        ...options,
        url: '/git/v1/identity/{identity}/permissions/{repo}'
    });
};

/**
 * Update a permission for a Git identity
 * Update a permission for a Git identity on a repository
 */
export const handleUpdatePermission = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleUpdatePermissionData, ThrowOnError>) => {
    return (options?.client ?? client).patch<HandleUpdatePermissionResponse, HandleUpdatePermissionError, ThrowOnError>({
        ...options,
        url: '/git/v1/identity/{identity}/permissions/{repo}'
    });
};

/**
 * List access tokens for a Git identity
 * List access tokens for a Git identity
 */
export const handleListGitTokens = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleListGitTokensData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListGitTokensResponse, HandleListGitTokensError, ThrowOnError>({
        ...options,
        url: '/git/v1/identity/{identity}/tokens'
    });
};

/**
 * Create an access token for a Git identity
 * Create an access token for a Git identity
 */
export const handleCreateGitToken = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleCreateGitTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleCreateGitTokenResponse, HandleCreateGitTokenError, ThrowOnError>({
        ...options,
        url: '/git/v1/identity/{identity}/tokens'
    });
};

/**
 * Revoke an access token for a Git identity
 * Revoke an access token for a Git identity
 */
export const handleRevokeGitToken = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleRevokeGitTokenData, ThrowOnError>) => {
    return (options?.client ?? client).delete<HandleRevokeGitTokenResponse, HandleRevokeGitTokenError, ThrowOnError>({
        ...options,
        url: '/git/v1/identity/{identity}/tokens'
    });
};

/**
 * List repositories
 * List repositories.
 */
export const handleListRepositories = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<HandleListRepositoriesData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListRepositoriesResponse, HandleListRepositoriesError, ThrowOnError>({
        ...options,
        url: '/git/v1/repo'
    });
};

/**
 * Create a repository
 * Create a repository. Once the repository is created, it will also be created on the Git server.
 * The repository name must be unique within your account.
 *
 * Once created, you can then push your code to this repository.
 *
 * The repo will be available at `git.freestyle.sh/{repo-id}`
 *
 */
export const handleCreateRepo = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleCreateRepoData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleCreateRepoResponse, HandleCreateRepoError, ThrowOnError>({
        ...options,
        url: '/git/v1/repo'
    });
};

/**
 * Get a blob object
 * Get a blob from the Git database. The contents will always be base64 encoded.
 */
export const handleGetBlob = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleGetBlobData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleGetBlobResponse, HandleGetBlobError, ThrowOnError>({
        ...options,
        url: '/git/v1/repo/{repo_id}/git/blobs/{hash}'
    });
};

/**
 * Get a commit object
 * Get a commit from the Git database with detailed information.
 */
export const handleGetCommit = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleGetCommitData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleGetCommitResponse, HandleGetCommitError, ThrowOnError>({
        ...options,
        url: '/git/v1/repo/{repo_id}/git/commits/{hash}'
    });
};

/**
 * Get a tag object
 * Get a tag from the Git database.
 */
export const handleGetTag = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleGetTagData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleGetTagResponse, HandleGetTagError, ThrowOnError>({
        ...options,
        url: '/git/v1/repo/{repo_id}/git/tags/{hash}'
    });
};

/**
 * Get a tree object
 * Get a tree from the Git database with its entries.
 */
export const handleGetTree = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleGetTreeData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleGetTreeResponse, HandleGetTreeError, ThrowOnError>({
        ...options,
        url: '/git/v1/repo/{repo_id}/git/trees/{hash}'
    });
};

/**
 * Delete a repository
 * Delete a repository. This is irreversible, and will also delete the repository on the Git server.
 */
export const handleDeleteRepo = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDeleteRepoData, ThrowOnError>) => {
    return (options?.client ?? client).delete<HandleDeleteRepoResponse, HandleDeleteRepoError, ThrowOnError>({
        ...options,
        url: '/git/v1/repo/{repo}'
    });
};

/**
 * List git triggers for a repository
 * List git triggers for the given repository.
 */
export const handleListGitTriggers = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleListGitTriggersData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListGitTriggersResponse, HandleListGitTriggersError, ThrowOnError>({
        ...options,
        url: '/git/v1/repo/{repo}/trigger'
    });
};

/**
 * Create a git trigger
 * Create a git trigger for the given repository.
 */
export const handleCreateGitTrigger = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleCreateGitTriggerData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleCreateGitTriggerResponse, HandleCreateGitTriggerError, ThrowOnError>({
        ...options,
        url: '/git/v1/repo/{repo}/trigger'
    });
};

/**
 * Delete a git trigger
 * Delete a git trigger. This is irreversible.
 */
export const handleDeleteGitTrigger = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDeleteGitTriggerData, ThrowOnError>) => {
    return (options?.client ?? client).delete<HandleDeleteGitTriggerResponse, HandleDeleteGitTriggerError, ThrowOnError>({
        ...options,
        url: '/git/v1/repo/{repo}/trigger/{trigger}'
    });
};

/**
 * Deployment Logs
 * Get the logs for a deployment
 */
export const handleGetLogs = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<HandleGetLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleGetLogsResponse, HandleGetLogsError, ThrowOnError>({
        ...options,
        url: '/observability/v1/logs'
    });
};

/**
 * @deprecated
 * Deploy a Website (v1)
 * Deploy a website. Files is a map of file paths to file contents. Configuration is optional and contains additional information about the deployment.
 */
export const handleDeployWeb = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDeployWebData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleDeployWebResponse, HandleDeployWebError, ThrowOnError>({
        ...options,
        url: '/web/v1/deploy'
    });
};

/**
 * Deploy a Website
 * Deploy a website. Files is a map of file paths to file contents. Configuration is optional and contains additional information about the deployment.
 */
export const handleDeployWebV2 = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDeployWebV2Data, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleDeployWebV2Response, HandleDeployWebV2Error, ThrowOnError>({
        ...options,
        url: '/web/v1/deployment'
    });
};

/**
 * List web deploys
 * List web deploys.
 */
export const handleListWebDeploys = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleListWebDeploysData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListWebDeploysResponse, HandleListWebDeploysError, ThrowOnError>({
        ...options,
        url: '/web/v1/deployments'
    });
};

/**
 * Get information on web deploy
 * Get information about a web deploy by its ID.
 */
export const handleGetWebDeployDetails = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleGetWebDeployDetailsData, ThrowOnError>) => {
    return (options?.client ?? client).get<void, unknown, ThrowOnError>({
        ...options,
        url: '/web/v1/deployments/deployment/{deployment_id}'
    });
};