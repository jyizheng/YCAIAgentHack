import { F as FreestyleExecuteScriptParamsConfiguration, a as FreestyleExecuteScriptResultSuccess, bB as HandleExecuteScriptError, b as FreestyleDeployWebConfiguration, c as FreestyleDeployWebSuccessResponseV2 } from '../types.gen-BbekD8Sd.js';
import { T as Tool, a as ToolExecutionOptions } from '../index.d-9H_wnIbz.js';
import { z } from 'zod';
import 'node:http';
import 'http';

declare const executeCodeSchema: z.ZodObject<{
    script: z.ZodString;
}, "strip", z.ZodTypeAny, {
    script?: string;
}, {
    script?: string;
}>;
declare const executeCodeDescription: (envVars: string, nodeModules: string) => string;
/**
 * Execute a JavaScript or TypeScript script
 *
 *
 * @param config - Configuration for the tool
 * @param config.apiKey - The API key to use
 * @param {Function} [config.onResult] - Optional callback function to handle the result.
 * @param {boolean} [config.truncateOutput=false] - Whether to truncate the result to 1000 characters and truncate individual logs to the first 250 characters; useful to prevent long outputs from filling the context window.
 */
declare const executeTool: (config: FreestyleExecuteScriptParamsConfiguration & {
    apiKey: string;
    onResult?: (_v: {
        toolCallId: string;
        input: {
            script: string;
            [key: string]: unknown;
        };
        result: FreestyleExecuteScriptResultSuccess | HandleExecuteScriptError;
    }) => void | Promise<void>;
    truncateOutput?: boolean;
}) => Tool<z.ZodObject<{
    script: z.ZodString;
}, "strip", z.ZodTypeAny, {
    script?: string;
}, {
    script?: string;
}>, FreestyleExecuteScriptResultSuccess | {
    message: any;
    error: any;
}> & {
    execute: (args: {
        script?: string;
    }, options: ToolExecutionOptions) => PromiseLike<FreestyleExecuteScriptResultSuccess | {
        message: any;
        error: any;
    }>;
};
/**
 * Deploy a Web project
 * @param config - Configuration for the tool
 * @param config.apiKey - The API key to use
 */
declare const deployWebTool: (config: FreestyleDeployWebConfiguration & {
    apiKey: string;
}) => Tool<z.ZodObject<{
    files: z.ZodRecord<z.ZodString, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    files?: Record<string, string>;
}, {
    files?: Record<string, string>;
}>, string | FreestyleDeployWebSuccessResponseV2> & {
    execute: (args: {
        files?: Record<string, string>;
    }, options: ToolExecutionOptions) => PromiseLike<string | FreestyleDeployWebSuccessResponseV2>;
};

export { deployWebTool, executeCodeDescription, executeCodeSchema, executeTool };
