/**
 * Identical to [`RepositoryInfo`], but with the permissions field added.
 */
type AccessibleRepository = {
    id: string;
    name?: (string) | null;
    accountId: string;
    permissions: AccessLevel;
    visibility: Visibility;
};
type AccessLevel = 'read' | 'write';
type AccessTokenInfo = {
    id: string;
};
type Behavior = 'regex' | 'exact';
type CreateDomainMappingRequest = {
    deploymentId: string;
};
type CreatedToken = {
    id: string;
    token: string;
};
type CreateRecordParams = {
    domain: string;
    record: DnsRecordData;
};
type CreateRepoRequest = {
    source?: (null | CreateRepoSource);
};
type CreateRepositoryRequest = {
    /**
     * This name is not visible to users, and is only accessible to you via API and in the
     * dashboard. Mostly useful for observability.
     */
    name?: (string) | null;
    public?: boolean;
    source?: CreateRepoSource;
};
type CreateRepositoryResponseSuccess = {
    repoId: string;
};
type CreateRepoSource = {
    url: string;
    branch?: (string) | null;
    depth?: (number) | null;
    type: 'git';
};
type type = 'git';
type CustomBuildOptions = {
    command?: (string) | null;
};
type DeploymentBuildOptions = CustomBuildOptions | boolean;
type DeploymentLogEntry = {
    deploymentId: string;
    accountId: string;
    provisionedAt: string;
    timeout: string;
    state: DeploymentState;
    deployedAt?: (string) | null;
    domains: Array<(string)>;
    envVars: {
        [key: string]: (string);
    };
};
type DeploymentSource = {
    files: {
        [key: string]: FreestyleFile;
    };
    kind: 'files';
} | {
    url: string;
    kind: 'tar';
} | {
    url: string;
    branch?: (string) | null;
    kind: 'git';
};
type kind = 'files';
type DeploymentState = 'provisioning' | 'deployed' | 'failed';
type DescribePermissionResponseSuccess = {
    identity: string;
    repo: string;
    accessLevel?: (null | AccessLevel);
};
type DevServer = {
    command?: (string) | null;
    /**
     * @deprecated
     */
    repo?: (string) | null;
    repoId?: (string) | null;
    /**
     * @deprecated
     */
    domain?: (string) | null;
};
type DnsRecord = {
    kind: DnsRecordKind;
    name: string;
    value: string;
    ttl: string;
    priority?: (number) | null;
    managed: boolean;
};
type DnsRecordData = {
    kind: DnsRecordKind;
    name: string;
    value: string;
    ttl?: (string) | null;
    priority?: (number) | null;
};
type DnsRecordKind = 'A' | 'AAAA' | 'CNAME' | 'TXT' | 'NS';
type DomainVerificationRequest = {
    id: string;
    domain: string;
    accountId: string;
    verificationCode: string;
    createdAt: number;
};
type ExecuteLogEntry = {
    deployment: string;
    accountId: string;
    provisionedAt: string;
    startedAt?: (string) | null;
    duration?: (string) | null;
    state: ExecuteRunState;
    envVars: {
        [key: string]: (string);
    };
};
type ExecuteRunInfo = {
    code: string;
    nodeModules: {
        [key: string]: (string);
    };
};
type ExecuteRunState = 'starting' | 'running' | 'complete';
type FreestyleCloudstateDeployConfiguration = {
    /**
     * ID of the project to deploy, if not provided will create a new project
     */
    domains?: Array<(string)> | null;
    /**
     * The environment variables that the cloudstate deploy can access
     */
    envVars?: {
        [key: string]: (string);
    };
    cloudstateDatabaseId?: (string) | null;
};
type FreestyleCloudstateDeployErrorResponse = {
    message: string;
};
type FreestyleCloudstateDeployRequest = {
    classes: string;
    config?: FreestyleCloudstateDeployConfiguration;
};
type FreestyleCloudstateDeploySuccessResponse = {
    deploymentId: string;
    cloudstateDatabaseId: string;
};
type FreestyleDeleteDomainVerificationRequest = {
    /**
     * The domain to create a verification code for
     */
    domain: string;
    /**
     * The verification code
     */
    verificationCode: string;
};
type FreestyleDeployWebConfiguration = {
    /**
     * The entrypoint file for the website
     */
    entrypoint?: (string) | null;
    /**
     * The custom domains for the website, eg. [\"subdomain.yourwebsite.com\"]. You may include a single *.style.dev domain here.
     */
    domains?: Array<(string)> | null;
    /**
     * Project ID was our original way of tracking deployments together, it is now deprecated and will be removed in the future. Please use the domains field to specify the domains for your project.
     * @deprecated
     */
    projectId?: (string) | null;
    /**
     * Node Modules to install for the website, a map of package names to versions, e.g. { \"express\": \"4.17.1\" }. If this and a package-lock.json are provided, the package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock is also provided, the versions here will override the versions in those lock files.
     */
    nodeModules?: {
        [key: string]: (string);
    } | null;
    /**
     * The environment variables that the website can access
     * e.g. { \"RESEND_API_KEY\": \"re_123456789\" }
     */
    envVars?: {
        [key: string]: (string);
    } | null;
    serverStartCheck?: boolean;
    networkPermissions?: Array<FreestyleNetworkPermission> | null;
    build?: (null | DeploymentBuildOptions);
    /**
     * Timeout for the deployment in seconds. If not provided, the default is 10 seconds.
     */
    timeout?: (number) | null;
};
type FreestyleDeployWebErrorResponse = {
    message: string;
};
type FreestyleDeployWebPayload = {
    /**
     * The files to deploy, a map of file paths to file contents, e.g. { \"index.js\": {\"content\": \"your main\", \"encoding\": \"utf-8\"}, \"file2.js\": {\"content\": \"your helper\" } }
     *
     * **Do not include node modules in this bundle, they will not work**. Instead, includes a package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock, the node modules for the project will be installed from that lock file, or use the node_modules field in the configuration to specify the node modules to install.
     */
    files: {
        [key: string]: FreestyleFile;
    };
    config?: FreestyleDeployWebConfiguration;
};
type FreestyleDeployWebPayloadV2 = {
    /**
     * The files to deploy, a map of file paths to file contents, e.g. { \"index.js\": {\"content\": \"your main\", \"encoding\": \"utf-8\"}, \"file2.js\": {\"content\": \"your helper\" } }
     *
     * **Do not include node modules in this bundle, they will not work**. Instead, includes a package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock, the node modules for the project will be installed from that lock file, or use the node_modules field in the configuration to specify the node modules to install.
     */
    source: DeploymentSource;
    config?: FreestyleDeployWebConfiguration;
};
type FreestyleDeployWebSuccessResponseV2 = {
    deploymentId: string;
    /**
     * @deprecated
     */
    projectId: string;
    domains?: Array<(string)> | null;
    /**
     * The entrypoint file for the website. If not specified we try to automatically detect it.
     */
    entrypoint: string;
};
type FreestyleDomainVerificationRequest = {
    /**
     * The domain to create a verification code for
     */
    domain: string;
};
type FreestyleExecuteScriptParams = {
    /**
     * The JavaScript or TypeScript script to execute
     */
    script: string;
    config?: FreestyleExecuteScriptParamsConfiguration;
};
type FreestyleExecuteScriptParamsConfiguration = {
    /**
     * The environment variables to set for the script
     */
    envVars?: {
        [key: string]: (string);
    };
    /**
     * The node modules to install for the script
     */
    nodeModules?: {
        [key: string]: (string);
    };
    /**
     * Tags for you to organize your scripts, useful for tracking what you're running
     */
    tags?: Array<(string)>;
    /**
     * The script timeout
     */
    timeout?: (string) | null;
    /**
     * If false, we'll not resolve peer dependencies for the packages given, this can speed up execute performance, but will break packages with peers unless the peers are manually specified.
     */
    peerDependencyResolution?: boolean;
    networkPermissions?: Array<FreestyleNetworkPermission> | null;
    /**
     * These headers will be added to every fetch request made through the script
     */
    customHeaders?: {
        [key: string]: (string);
    };
    /**
     * Proxy all outgoing requests through this URL
     */
    proxy?: (string) | null;
};
type FreestyleExecuteScriptResultSuccess = {
    /**
     * The return value of the default export of the script
     */
    result: unknown;
    logs: Array<FreestyleJavaScriptLog>;
};
type FreestyleFile = {
    /**
     * The content of the file
     */
    content: string;
    /**
     * The encoding of the file. Either **utf-8** or **base64**
     */
    encoding?: string;
};
type FreestyleGetLogsResponse = {
    logs: Array<FreestyleLogResponseObject>;
};
type FreestyleJavaScriptLog = {
    /**
     * The log message
     */
    message: string;
    /**
     * The log level
     */
    type: string;
};
type FreestyleLogResponseObject = {
    message: string;
    timestamp: string;
};
type FreestyleNetworkPermission = (NetworkPermissionData & {
    action: 'allow';
}) | (NetworkPermissionData & {
    action: 'deny';
});
type action = 'allow';
/**
 * Verify a domain verification request, can either be done for a domain, or for a specific request
 */
type FreestyleVerifyDomainRequest = {
    domain: string;
} | {
    id: string;
};
type GitIdentity = {
    id: string;
};
type GitRepositoryTrigger = {
    repositoryId: string;
    trigger: ({
        branches?: Array<(string)> | null;
        globs?: Array<(string)> | null;
        event: 'push';
    });
    action: ({
        endpoint: string;
        action: 'webhook';
    });
    managed: boolean;
    id: string;
    createdAt: number;
};
type event = 'push';
type action2 = 'webhook';
type GitTrigger = {
    branches?: Array<(string)> | null;
    globs?: Array<(string)> | null;
    event: 'push';
};
type GitTriggerAction = {
    endpoint: string;
    action: 'webhook';
};
type GrantPermissionRequest = {
    permission: AccessLevel;
};
type InternalServerError = string;
type ListGitTokensResponseSuccess = {
    tokens: Array<AccessTokenInfo>;
};
type ListPermissionResponseSuccess = {
    repositories: Array<AccessibleRepository>;
};
type ListRecordsResponse = {
    records: Array<DnsRecord>;
};
type NetworkPermissionData = {
    query: string;
    behavior?: Behavior;
};
type RepositoryInfo = {
    id: string;
    name?: (string) | null;
    accountId: string;
    visibility: Visibility;
};
type RevokeGitTokenRequest = {
    tokenId: string;
};
type UpdatePermissionRequest = {
    permission: AccessLevel;
};
type Visibility = 'public' | 'private';
type HandleDeployCloudstateData = {
    body: FreestyleCloudstateDeployRequest;
};
type HandleDeployCloudstateResponse = (FreestyleCloudstateDeploySuccessResponse);
type HandleDeployCloudstateError = (FreestyleCloudstateDeployErrorResponse);
type HandleBackupCloudstateData = {
    path: {
        id: string;
    };
};
type HandleBackupCloudstateResponse = (Array<(number)>);
type HandleBackupCloudstateError = (unknown);
type HandleListRecordsData = {
    query: {
        domain: string;
    };
};
type HandleListRecordsResponse = (ListRecordsResponse);
type HandleListRecordsError = ({
    message: string;
});
type HandleCreateRecordData = {
    body: CreateRecordParams;
};
type HandleCreateRecordResponse = ({
    record: DnsRecord;
});
type HandleCreateRecordError = ({
    message: string;
});
type HandleDeleteRecordData = {
    query: {
        domain: string;
        record: DnsRecord;
    };
};
type HandleDeleteRecordResponse = ({
    message: string;
});
type HandleDeleteRecordError = ({
    message: string;
});
type HandleVerifyWildcardData = {
    path: {
        domain: string;
    };
};
type HandleVerifyWildcardResponse = ({
    domain: string;
});
type HandleVerifyWildcardError = ({
    message: string;
});
type HandleListDomainsResponse = (Array<{
    domain: string;
    createdAt: number;
}>);
type HandleListDomainsError = ({
    message: string;
});
type HandleInsertDomainMappingData = {
    body: CreateDomainMappingRequest;
    path: {
        domain: string;
    };
};
type HandleInsertDomainMappingResponse = (unknown);
type HandleInsertDomainMappingError = ({
    message: string;
});
type HandleDeleteDomainMappingData = {
    path: {
        domain: string;
    };
};
type HandleDeleteDomainMappingResponse = (unknown);
type HandleDeleteDomainMappingError = ({
    message: string;
});
type HandleListDomainVerificationRequestsResponse = (Array<{
    verificationCode: string;
    domain: string;
    createdAt: number;
}>);
type HandleListDomainVerificationRequestsError = ({
    message: string;
});
type HandleVerifyDomainData = {
    body: FreestyleVerifyDomainRequest;
};
type HandleVerifyDomainResponse = ({
    domain: string;
});
type HandleVerifyDomainError = ({
    message: string;
});
type HandleCreateDomainVerificationData = {
    body: FreestyleDomainVerificationRequest;
};
type HandleCreateDomainVerificationResponse = (DomainVerificationRequest);
type HandleCreateDomainVerificationError = ({
    message: string;
});
type HandleDeleteDomainVerificationData = {
    body: FreestyleDeleteDomainVerificationRequest;
};
type HandleDeleteDomainVerificationResponse = ({
    verificationCode: string;
    domain: string;
});
type HandleDeleteDomainVerificationError = ({
    message: string;
});
type HandleEphemeralDevServerData = {
    body: DevServer;
};
type HandleEphemeralDevServerResponse = ({
    /**
     * @deprecated
     */
    url: string;
    isNew: boolean;
    devCommandRunning: boolean;
    installCommandRunning: boolean;
    mcpEphemeralUrl?: (string) | null;
    ephemeralUrl?: (string) | null;
});
type HandleEphemeralDevServerError = (InternalServerError);
type HandleListExecuteRunsData = {
    query?: {
        limit?: (number) | null;
        offset?: (number) | null;
    };
};
type HandleListExecuteRunsResponse = ({
    entries: Array<ExecuteLogEntry>;
    total: number;
    offset: number;
});
type HandleListExecuteRunsError = ({
    message: string;
});
type HandleGetExecuteRunData = {
    path: {
        deployment: string;
    };
};
type HandleGetExecuteRunResponse = ({
    metadata: ExecuteLogEntry;
    code: ExecuteRunInfo;
});
type HandleGetExecuteRunError = ({
    message: string;
});
type HandleExecuteScriptData = {
    body: FreestyleExecuteScriptParams;
};
type HandleExecuteScriptResponse = ({
    /**
     * The return value of the default export of the script
     */
    result: unknown;
    logs: Array<FreestyleJavaScriptLog>;
});
type HandleExecuteScriptError = ({
    error: string;
    logs?: Array<FreestyleJavaScriptLog> | null;
});
type HandleListIdentitiesData = {
    query?: {
        limit?: (number) | null;
        offset?: (number) | null;
    };
};
type HandleListIdentitiesResponse = ({
    identities: Array<GitIdentity>;
    offset: number;
    total: number;
});
type HandleListIdentitiesError = ({
    message: string;
});
type HandleCreateIdentityResponse = (GitIdentity);
type HandleCreateIdentityError = ({
    message: string;
});
type HandleDeleteIdentityData = {
    path: {
        identity: string;
    };
};
type HandleDeleteIdentityResponse = ({
    [key: string]: unknown;
});
type HandleDeleteIdentityError = ({
    message: string;
});
type HandleListPermissionsData = {
    path: {
        identity: string;
    };
    query?: {
        /**
         * Maximum number of repositories to return
         */
        limit?: number;
        /**
         * Offset for the list of repositories
         */
        offset?: number;
    };
};
type HandleListPermissionsResponse = (ListPermissionResponseSuccess);
type HandleListPermissionsError = ({
    message: string;
});
type HandleDescribePermissionData = {
    path: {
        identity: string;
        repo: string;
    };
};
type HandleDescribePermissionResponse = (DescribePermissionResponseSuccess);
type HandleDescribePermissionError = ({
    message: string;
});
type HandleGrantPermissionData = {
    body: GrantPermissionRequest;
    path: {
        identity: string;
        repo: string;
    };
};
type HandleGrantPermissionResponse = ({
    [key: string]: unknown;
});
type HandleGrantPermissionError = ({
    message: string;
});
type HandleRevokePermissionData = {
    path: {
        identity: string;
        repo: string;
    };
};
type HandleRevokePermissionResponse = ({
    [key: string]: unknown;
});
type HandleRevokePermissionError = ({
    message: string;
});
type HandleUpdatePermissionData = {
    body: UpdatePermissionRequest;
    path: {
        identity: string;
        repo: string;
    };
};
type HandleUpdatePermissionResponse = ({
    [key: string]: unknown;
});
type HandleUpdatePermissionError = ({
    message: string;
});
type HandleListGitTokensData = {
    path: {
        identity: string;
    };
};
type HandleListGitTokensResponse = (ListGitTokensResponseSuccess);
type HandleListGitTokensError = ({
    message: string;
});
type HandleCreateGitTokenData = {
    path: {
        identity: string;
    };
};
type HandleCreateGitTokenResponse = (CreatedToken);
type HandleCreateGitTokenError = ({
    message: string;
});
type HandleRevokeGitTokenData = {
    body: RevokeGitTokenRequest;
    path: {
        identity: string;
    };
};
type HandleRevokeGitTokenResponse = ({
    [key: string]: unknown;
});
type HandleRevokeGitTokenError = ({
    message: string;
});
type HandleListRepositoriesData = {
    query?: {
        /**
         * Maximum number of repositories to return
         */
        limit?: number;
        /**
         * Offset for the list of repositories
         */
        offset?: number;
    };
};
type HandleListRepositoriesResponse = ({
    repositories: Array<RepositoryInfo>;
    offset: number;
});
type HandleListRepositoriesError = ({
    message: string;
});
type HandleCreateRepoData = {
    body: {
        /**
         * This name is not visible to users, and is only accessible to you via API and in the
         * dashboard. Mostly useful for observability.
         */
        name?: (string) | null;
        public?: boolean;
        source?: CreateRepoSource;
    };
};
type HandleCreateRepoResponse = (CreateRepositoryResponseSuccess);
type HandleCreateRepoError = ({
    message: string;
});
type HandleDeleteRepoData = {
    path: {
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleDeleteRepoResponse = ({
    [key: string]: unknown;
});
type HandleDeleteRepoError = ({
    message: string;
} | {
    [key: string]: unknown;
});
type HandleListGitTriggersData = {
    path: {
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleListGitTriggersResponse = ({
    triggers: Array<GitRepositoryTrigger>;
});
type HandleListGitTriggersError = ({
    message: string;
});
type HandleCreateGitTriggerData = {
    body: {
        trigger: ({
            branches?: Array<(string)> | null;
            globs?: Array<(string)> | null;
            event: 'push';
        });
        action: ({
            endpoint: string;
            action: 'webhook';
        });
    };
    path: {
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleCreateGitTriggerResponse = ({
    triggerId: string;
});
type HandleCreateGitTriggerError = ({
    message: string;
});
type HandleDeleteGitTriggerData = {
    path: {
        /**
         * The trigger id
         */
        trigger: string;
    };
};
type HandleDeleteGitTriggerResponse = ({
    [key: string]: unknown;
});
type HandleDeleteGitTriggerError = ({
    message: string;
} | {
    [key: string]: unknown;
});
type HandleGetLogsData = {
    query?: {
        deploymentId?: (string) | null;
        domain?: (string) | null;
    };
};
type HandleGetLogsResponse = (FreestyleGetLogsResponse);
type HandleGetLogsError = unknown;
type HandleDeployWebData = {
    body: FreestyleDeployWebPayload;
};
type HandleDeployWebResponse = (FreestyleDeployWebSuccessResponseV2);
type HandleDeployWebError = (FreestyleDeployWebErrorResponse);
type HandleDeployWebV2Data = {
    body: FreestyleDeployWebPayloadV2;
};
type HandleDeployWebV2Response = (FreestyleDeployWebSuccessResponseV2);
type HandleDeployWebV2Error = (FreestyleDeployWebErrorResponse);
type HandleListWebDeploysData = {
    query: {
        /**
         * Maximum number of repositories to return
         */
        limit: number;
        /**
         * Offset for the list of repositories
         */
        offset: number;
    };
};
type HandleListWebDeploysResponse = ({
    entries: Array<DeploymentLogEntry>;
    total: number;
    offset: number;
});
type HandleListWebDeploysError = ({
    message: string;
});
type HandleGetWebDeployDetailsData = {
    path: {
        deployment_id: string;
    };
};

export type { ExecuteLogEntry as $, AccessLevel as A, HandleCreateGitTriggerResponse as B, CreateRepositoryResponseSuccess as C, DeploymentSource as D, DeploymentBuildOptions as E, FreestyleExecuteScriptParamsConfiguration as F, GitIdentity as G, HandleBackupCloudstateResponse as H, AccessibleRepository as I, AccessTokenInfo as J, Behavior as K, ListPermissionResponseSuccess as L, CreateDomainMappingRequest as M, CreateRecordParams as N, CreateRepoRequest as O, CreateRepositoryRequest as P, CreateRepoSource as Q, type as R, CustomBuildOptions as S, DeploymentLogEntry as T, kind as U, DeploymentState as V, DevServer as W, DnsRecord as X, DnsRecordData as Y, DnsRecordKind as Z, DomainVerificationRequest as _, FreestyleExecuteScriptResultSuccess as a, HandleGetExecuteRunError as a$, ExecuteRunInfo as a0, ExecuteRunState as a1, FreestyleCloudstateDeployConfiguration as a2, FreestyleCloudstateDeployErrorResponse as a3, FreestyleDeleteDomainVerificationRequest as a4, FreestyleDeployWebErrorResponse as a5, FreestyleDeployWebPayload as a6, FreestyleDeployWebPayloadV2 as a7, FreestyleDomainVerificationRequest as a8, FreestyleExecuteScriptParams as a9, HandleCreateRecordData as aA, HandleCreateRecordResponse as aB, HandleCreateRecordError as aC, HandleDeleteRecordData as aD, HandleDeleteRecordResponse as aE, HandleDeleteRecordError as aF, HandleVerifyWildcardData as aG, HandleVerifyWildcardError as aH, HandleListDomainsError as aI, HandleInsertDomainMappingData as aJ, HandleInsertDomainMappingResponse as aK, HandleInsertDomainMappingError as aL, HandleDeleteDomainMappingData as aM, HandleDeleteDomainMappingResponse as aN, HandleDeleteDomainMappingError as aO, HandleListDomainVerificationRequestsError as aP, HandleVerifyDomainData as aQ, HandleCreateDomainVerificationData as aR, HandleCreateDomainVerificationError as aS, HandleDeleteDomainVerificationData as aT, HandleDeleteDomainVerificationError as aU, HandleEphemeralDevServerData as aV, HandleEphemeralDevServerResponse as aW, HandleEphemeralDevServerError as aX, HandleListExecuteRunsData as aY, HandleListExecuteRunsError as aZ, HandleGetExecuteRunData as a_, FreestyleFile as aa, FreestyleGetLogsResponse as ab, FreestyleJavaScriptLog as ac, FreestyleLogResponseObject as ad, FreestyleNetworkPermission as ae, action as af, FreestyleVerifyDomainRequest as ag, GitRepositoryTrigger as ah, event as ai, action2 as aj, GrantPermissionRequest as ak, InternalServerError as al, ListRecordsResponse as am, NetworkPermissionData as an, RepositoryInfo as ao, RevokeGitTokenRequest as ap, UpdatePermissionRequest as aq, Visibility as ar, HandleDeployCloudstateData as as, HandleDeployCloudstateResponse as at, HandleDeployCloudstateError as au, HandleBackupCloudstateData as av, HandleBackupCloudstateError as aw, HandleListRecordsData as ax, HandleListRecordsResponse as ay, HandleListRecordsError as az, FreestyleDeployWebConfiguration as b, HandleExecuteScriptData as b0, HandleExecuteScriptResponse as b1, HandleExecuteScriptError as b2, HandleListIdentitiesData as b3, HandleListIdentitiesResponse as b4, HandleListIdentitiesError as b5, HandleCreateIdentityResponse as b6, HandleCreateIdentityError as b7, HandleDeleteIdentityData as b8, HandleDeleteIdentityError as b9, HandleCreateRepoResponse as bA, HandleCreateRepoError as bB, HandleDeleteRepoData as bC, HandleDeleteRepoError as bD, HandleListGitTriggersData as bE, HandleListGitTriggersError as bF, HandleCreateGitTriggerData as bG, HandleCreateGitTriggerError as bH, HandleDeleteGitTriggerData as bI, HandleDeleteGitTriggerResponse as bJ, HandleDeleteGitTriggerError as bK, HandleGetLogsData as bL, HandleGetLogsError as bM, HandleDeployWebData as bN, HandleDeployWebResponse as bO, HandleDeployWebError as bP, HandleDeployWebV2Data as bQ, HandleDeployWebV2Response as bR, HandleDeployWebV2Error as bS, HandleListWebDeploysData as bT, HandleListWebDeploysError as bU, HandleGetWebDeployDetailsData as bV, HandleListPermissionsData as ba, HandleListPermissionsResponse as bb, HandleListPermissionsError as bc, HandleDescribePermissionData as bd, HandleDescribePermissionResponse as be, HandleDescribePermissionError as bf, HandleGrantPermissionData as bg, HandleGrantPermissionError as bh, HandleRevokePermissionData as bi, HandleRevokePermissionResponse as bj, HandleRevokePermissionError as bk, HandleUpdatePermissionData as bl, HandleUpdatePermissionResponse as bm, HandleUpdatePermissionError as bn, HandleListGitTokensData as bo, HandleListGitTokensResponse as bp, HandleListGitTokensError as bq, HandleCreateGitTokenData as br, HandleCreateGitTokenResponse as bs, HandleCreateGitTokenError as bt, HandleRevokeGitTokenData as bu, HandleRevokeGitTokenResponse as bv, HandleRevokeGitTokenError as bw, HandleListRepositoriesData as bx, HandleListRepositoriesError as by, HandleCreateRepoData as bz, FreestyleDeployWebSuccessResponseV2 as c, FreestyleCloudstateDeployRequest as d, FreestyleCloudstateDeploySuccessResponse as e, HandleGetLogsResponse as f, HandleCreateDomainVerificationResponse as g, HandleVerifyDomainResponse as h, HandleVerifyDomainError as i, HandleListDomainsResponse as j, HandleListDomainVerificationRequestsResponse as k, HandleDeleteDomainVerificationResponse as l, HandleListWebDeploysResponse as m, HandleListExecuteRunsResponse as n, HandleGetExecuteRunResponse as o, HandleVerifyWildcardResponse as p, HandleListRepositoriesResponse as q, HandleDeleteRepoResponse as r, HandleDeleteIdentityResponse as s, HandleGrantPermissionResponse as t, DescribePermissionResponseSuccess as u, CreatedToken as v, ListGitTokensResponseSuccess as w, HandleListGitTriggersResponse as x, GitTrigger as y, GitTriggerAction as z };
