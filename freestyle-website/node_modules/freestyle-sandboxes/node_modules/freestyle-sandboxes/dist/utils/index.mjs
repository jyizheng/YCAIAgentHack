import { glob, globSync } from 'glob';
import * as fs from 'fs/promises';
import * as require$$0 from 'fs';
import * as path from 'path';

const prepareDirForDeployment = async (directory) => {
  const files = {};
  const patterns = await glob("**/*", {
    cwd: directory,
    nodir: true,
    ignore: ["**/node_modules/**"],
    absolute: false,
    dot: true,
    posix: true
  });
  for (const relativePath of patterns) {
    try {
      const filePath = path.join(directory, relativePath);
      const content = await fs.readFile(filePath, "base64");
      files[relativePath] = {
        content,
        encoding: "base64"
      };
    } catch (error) {
      console.error(`Error reading file ${relativePath}:`, error);
    }
  }
  return {
    kind: "files",
    files
  };
};
const prepareDirForDeploymentSync = (directory) => {
  const files = {};
  const patterns = globSync("**/*", {
    cwd: directory,
    nodir: true,
    ignore: ["**/node_modules/**"],
    absolute: false,
    dot: true,
    posix: true
  });
  for (const relativePath of patterns) {
    try {
      const filePath = path.join(directory, relativePath);
      const content = require$$0.readFileSync(filePath, "base64");
      files[relativePath] = {
        content,
        encoding: "base64"
      };
    } catch (error) {
      console.error(`Error reading file ${relativePath}:`, error);
    }
  }
  return {
    kind: "files",
    files
  };
};
const prepareNextJsForDeployment = async (directory) => {
  const publicDir = path.join(directory, "public");
  const nextPublicDestination = path.join(directory, ".next/standalone/public");
  const staticDir = path.join(directory, ".next/static");
  const nextStaticDestination = path.join(
    directory,
    ".next/standalone/.next/static"
  );
  await fs.mkdir(nextPublicDestination, { recursive: true });
  await fs.copyFile(publicDir, nextPublicDestination);
  await fs.mkdir(nextStaticDestination, { recursive: true });
  await fs.copyFile(staticDir, nextStaticDestination);
  return await prepareDirForDeployment(directory);
};

export { prepareDirForDeployment, prepareDirForDeploymentSync, prepareNextJsForDeployment };
