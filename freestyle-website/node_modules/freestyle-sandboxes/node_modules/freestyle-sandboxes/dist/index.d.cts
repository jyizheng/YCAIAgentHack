import { F as FreestyleExecuteScriptParamsConfiguration, a as FreestyleExecuteScriptResultSuccess, D as DeploymentSource, b as FreestyleDeployWebConfiguration, c as FreestyleDeployWebSuccessResponseV2, d as FreestyleCloudstateDeployRequest, e as FreestyleCloudstateDeploySuccessResponse, H as HandleBackupCloudstateResponse, f as HandleGetLogsResponse, g as HandleCreateDomainVerificationResponse, h as HandleVerifyDomainResponse, i as HandleVerifyDomainError, j as HandleListDomainsResponse, k as HandleListDomainVerificationRequestsResponse, l as HandleDeleteDomainVerificationResponse, m as HandleListWebDeploysResponse, n as HandleListExecuteRunsResponse, o as HandleGetExecuteRunResponse, p as HandleVerifyWildcardResponse, C as CreateRepositoryResponseSuccess, q as HandleListRepositoriesResponse, r as HandleDeleteRepoResponse, G as GitIdentity, s as HandleDeleteIdentityResponse, A as AccessLevel, t as HandleGrantPermissionResponse, L as ListPermissionResponseSuccess, u as DescribePermissionResponseSuccess, v as CreatedToken, w as ListGitTokensResponseSuccess, x as HandleListGitTriggersResponse, y as GitTrigger, z as GitTriggerAction, B as HandleCreateGitTriggerResponse } from './types.gen-BbekD8Sd.js';
export { J as AccessTokenInfo, I as AccessibleRepository, K as Behavior, M as BlobEncoding, N as BlobObject, O as CommitObject, P as CommitParent, Q as CommitTree, R as CreateDomainMappingRequest, S as CreateRecordParams, T as CreateRepoRequest, V as CreateRepoSource, U as CreateRepositoryRequest, X as CustomBuildOptions, E as DeploymentBuildOptions, Y as DeploymentLogEntry, _ as DeploymentState, $ as DevServer, a1 as DevServerRequest, a2 as DevServerStatusRequest, a3 as DnsRecord, a4 as DnsRecordData, a5 as DnsRecordKind, a6 as DomainVerificationRequest, a7 as ExecRequest, a8 as ExecuteLogEntry, a9 as ExecuteRunInfo, aa as ExecuteRunState, ab as FileReadContent, ad as FreestyleCloudstateDeployConfiguration, ae as FreestyleCloudstateDeployErrorResponse, af as FreestyleDeleteDomainVerificationRequest, ag as FreestyleDeployWebErrorResponse, ah as FreestyleDeployWebPayload, ai as FreestyleDeployWebPayloadV2, aj as FreestyleDomainVerificationRequest, ak as FreestyleExecuteScriptParams, al as FreestyleFile, am as FreestyleGetLogsResponse, an as FreestyleJavaScriptLog, ao as FreestyleLogResponseObject, ap as FreestyleNetworkPermission, ar as FreestyleVerifyDomainRequest, as as GitCommitPushRequest, at as GitRepositoryTrigger, aw as GrantPermissionRequest, aP as HandleBackupCloudstateData, aQ as HandleBackupCloudstateError, b9 as HandleCreateDomainVerificationData, ba as HandleCreateDomainVerificationError, b_ as HandleCreateGitTokenData, c0 as HandleCreateGitTokenError, b$ as HandleCreateGitTokenResponse, cp as HandleCreateGitTriggerData, cq as HandleCreateGitTriggerError, bG as HandleCreateIdentityError, bF as HandleCreateIdentityResponse, aU as HandleCreateRecordData, aW as HandleCreateRecordError, aV as HandleCreateRecordResponse, c6 as HandleCreateRepoData, c8 as HandleCreateRepoError, c7 as HandleCreateRepoResponse, b4 as HandleDeleteDomainMappingData, b6 as HandleDeleteDomainMappingError, b5 as HandleDeleteDomainMappingResponse, bb as HandleDeleteDomainVerificationData, bc as HandleDeleteDomainVerificationError, cr as HandleDeleteGitTriggerData, ct as HandleDeleteGitTriggerError, cs as HandleDeleteGitTriggerResponse, bH as HandleDeleteIdentityData, bI as HandleDeleteIdentityError, aX as HandleDeleteRecordData, aZ as HandleDeleteRecordError, aY as HandleDeleteRecordResponse, cl as HandleDeleteRepoData, cm as HandleDeleteRepoError, aM as HandleDeployCloudstateData, aO as HandleDeployCloudstateError, aN as HandleDeployCloudstateResponse, cw as HandleDeployWebData, cy as HandleDeployWebError, cx as HandleDeployWebResponse, cz as HandleDeployWebV2Data, cB as HandleDeployWebV2Error, cA as HandleDeployWebV2Response, bM as HandleDescribePermissionData, bO as HandleDescribePermissionError, bN as HandleDescribePermissionResponse, bs as HandleDevServerStatusData, bu as HandleDevServerStatusError, bt as HandleDevServerStatusResponse, bd as HandleEphemeralDevServerData, bf as HandleEphemeralDevServerError, be as HandleEphemeralDevServerResponse, bg as HandleExecOnEphemeralDevServerData, bi as HandleExecOnEphemeralDevServerError, bh as HandleExecOnEphemeralDevServerResponse, bz as HandleExecuteScriptData, bB as HandleExecuteScriptError, bA as HandleExecuteScriptResponse, c9 as HandleGetBlobData, cb as HandleGetBlobError, ca as HandleGetBlobResponse, cc as HandleGetCommitData, ce as HandleGetCommitError, cd as HandleGetCommitResponse, bx as HandleGetExecuteRunData, by as HandleGetExecuteRunError, cu as HandleGetLogsData, cv as HandleGetLogsError, cf as HandleGetTagData, ch as HandleGetTagError, cg as HandleGetTagResponse, ci as HandleGetTreeData, ck as HandleGetTreeError, cj as HandleGetTreeResponse, cE as HandleGetWebDeployDetailsData, bp as HandleGitCommitPushData, br as HandleGitCommitPushError, bq as HandleGitCommitPushResponse, bP as HandleGrantPermissionData, bQ as HandleGrantPermissionError, b1 as HandleInsertDomainMappingData, b3 as HandleInsertDomainMappingError, b2 as HandleInsertDomainMappingResponse, b7 as HandleListDomainVerificationRequestsError, b0 as HandleListDomainsError, bv as HandleListExecuteRunsData, bw as HandleListExecuteRunsError, bX as HandleListGitTokensData, bZ as HandleListGitTokensError, bY as HandleListGitTokensResponse, cn as HandleListGitTriggersData, co as HandleListGitTriggersError, bC as HandleListIdentitiesData, bE as HandleListIdentitiesError, bD as HandleListIdentitiesResponse, bJ as HandleListPermissionsData, bL as HandleListPermissionsError, bK as HandleListPermissionsResponse, aR as HandleListRecordsData, aT as HandleListRecordsError, aS as HandleListRecordsResponse, c4 as HandleListRepositoriesData, c5 as HandleListRepositoriesError, cC as HandleListWebDeploysData, cD as HandleListWebDeploysError, bm as HandleReadFileFromEphemeralDevServerData, bo as HandleReadFileFromEphemeralDevServerError, bn as HandleReadFileFromEphemeralDevServerResponse, c1 as HandleRevokeGitTokenData, c3 as HandleRevokeGitTokenError, c2 as HandleRevokeGitTokenResponse, bR as HandleRevokePermissionData, bT as HandleRevokePermissionError, bS as HandleRevokePermissionResponse, bU as HandleUpdatePermissionData, bW as HandleUpdatePermissionError, bV as HandleUpdatePermissionResponse, b8 as HandleVerifyDomainData, a_ as HandleVerifyWildcardData, a$ as HandleVerifyWildcardError, bj as HandleWriteFileFromEphemeralDevServerData, bl as HandleWriteFileFromEphemeralDevServerError, bk as HandleWriteFileFromEphemeralDevServerResponse, ax as InternalServerError, ay as ListRecordsResponse, az as NetworkPermissionData, aA as ReadFileRequest, aB as RepositoryInfo, aC as RevokeGitTokenRequest, aD as Signature, aE as TagObject, aF as TagTarget, aG as TreeEntry, aI as TreeObject, aJ as UpdatePermissionRequest, aK as Visibility, aL as WriteFileRequest, aq as action, av as action2, au as event, Z as kind, a0 as kind2, ac as kind3, W as type, aH as type2 } from './types.gen-BbekD8Sd.js';

declare class FreestyleSandboxes {
    private client;
    constructor(options: {
        /**
         * The base URL for the API.
         */
        baseUrl?: string;
        /**
         * The API key to use for requests.
         */
        apiKey: string;
        /**
         * Custom Headers to be sent with each request.
         */
        headers?: Record<string, string>;
    });
    /**
     * Execute a script in a sandbox.
     */
    executeScript(script: string, config?: FreestyleExecuteScriptParamsConfiguration): Promise<FreestyleExecuteScriptResultSuccess>;
    /**
     * Deploy a Web project to a sandbox.
     */
    deployWeb(source: DeploymentSource, config?: FreestyleDeployWebConfiguration): Promise<FreestyleDeployWebSuccessResponseV2>;
    /**
     * Deploy a Cloudstate project to a sandbox.
     */
    deployCloudstate(body: FreestyleCloudstateDeployRequest): Promise<FreestyleCloudstateDeploySuccessResponse>;
    /**
     * Get a backup of a Cloudstate project in a sandbox.
     * @param id The ID of the Cloudstate project.
     * @returns The backup of the Cloudstate project.
     * @throws An error if the backup could not be retrieved.
     */
    backupCloudstate(id: string): Promise<HandleBackupCloudstateResponse>;
    /**
     * Get logs for an execute run, or web deployment.
     * @param id The ID of the sandbox.
     * @returns The logs for the sandbox.
     * @throws An error if the logs could not be retrieved.
     */
    getLogs(id: string): Promise<HandleGetLogsResponse>;
    /**
     * Create a a domain verification request.
     * @param domain The domain to verify.
     * @returns The domain verification token.
     */
    createDomainVerificationRequest(domain: string): Promise<HandleCreateDomainVerificationResponse>;
    /**
     * Verify a domain. Note, this requires the domain verification token to be already set up.
     * @param domain The domain to verify.
     * @returns The domain verification request.
     */
    verifyDomain(domain: string): Promise<HandleVerifyDomainResponse | HandleVerifyDomainError>;
    listDomains(): Promise<HandleListDomainsResponse>;
    listDomainVerificationRequests(): Promise<HandleListDomainVerificationRequestsResponse>;
    deleteDomainVerificationRequest(domain: string, verificationCode: string): Promise<HandleDeleteDomainVerificationResponse>;
    listWebDeployments(limit?: number, offset?: number): Promise<HandleListWebDeploysResponse>;
    listExecuteRuns(limit?: number, offset?: number): Promise<HandleListExecuteRunsResponse>;
    getExecuteRun(id: string): Promise<HandleGetExecuteRunResponse>;
    /** Provision a wildcard certificate for domain. */
    provisionWildcard(domain: string): Promise<HandleVerifyWildcardResponse>;
    /**
     * Create a new git repository.
     */
    createGitRepository({ name, public: pub, source, }: {
        name: string;
        public?: boolean;
        source?: {
            type: "git";
            url: string;
            branch?: string;
            depth?: number;
        };
    }): Promise<CreateRepositoryResponseSuccess>;
    /**
     * List git repositories.
     */
    listGitRepositories({ limit, offset, }?: {
        limit?: number;
        offset?: number;
    }): Promise<HandleListRepositoriesResponse>;
    /**
     * Delete a git repository.
     */
    deleteGitRepository({ repoId, }: {
        repoId: string;
    }): Promise<HandleDeleteRepoResponse>;
    /**
     * Create a new git identity.
     */
    createGitIdentity(): Promise<GitIdentity>;
    /**
     * Delete a git identity.
     */
    deleteGitIdentity({ identityId, }: {
        identityId: string;
    }): Promise<HandleDeleteIdentityResponse>;
    /**
     * Grant a git identity access to a repository.
     */
    grantGitPermission({ repoId, identityId, permission, }: {
        repoId: string;
        identityId: string;
        permission: AccessLevel;
    }): Promise<HandleGrantPermissionResponse>;
    /**
     * Update a git identity's permissions on a repository.
     */
    updateGitPermission({ repoId, identityId, permission, }: {
        repoId: string;
        identityId: string;
        permission: AccessLevel;
    }): Promise<void>;
    /**
     * Revoke a git identity's access to a repository.
     */
    revokeGitPermission({ repoId, identityId, }: {
        repoId: string;
        identityId: string;
    }): Promise<void>;
    /**
     * List access permissions for a git identity.
     */
    listGitPermissions({ identityId, }: {
        identityId: string;
    }): Promise<ListPermissionResponseSuccess>;
    /**
     * Get the permission of a git identity on a repository.
     */
    getGitPermission({ repoId, identityId, }: {
        repoId: string;
        identityId: string;
    }): Promise<DescribePermissionResponseSuccess>;
    /**
     * Create a new git access token for an identity.
     */
    createGitAccessToken({ identityId, }: {
        identityId: string;
    }): Promise<CreatedToken>;
    /**
     * Revoke a git access token.
     */
    revokeGitAccessToken({ identityId, tokenId, }: {
        identityId: string;
        tokenId: string;
    }): Promise<void>;
    /**
     * List git access tokens for an identity.
     */
    listGitAccessTokens({ identityId, }: {
        identityId: string;
    }): Promise<ListGitTokensResponseSuccess>;
    /**
     * List git triggers for a repository.
     */
    listGitTriggers({ repoId, }: {
        repoId: string;
    }): Promise<HandleListGitTriggersResponse>;
    /**
     * Create a git trigger for a repository.
     */
    createGitTrigger({ repoId, trigger, action, }: {
        repoId: string;
        trigger: GitTrigger;
        action: GitTriggerAction;
    }): Promise<HandleCreateGitTriggerResponse>;
    /**
     * Delete a git trigger.
     */
    deleteGitTrigger({ triggerId }: {
        triggerId: string;
    }): Promise<void>;
    /**
     * Request a dev server for a repository. If a dev server is already running
     * for that repository, it will return a url to that server. Dev servers are
     * ephemeral so you should call this function every time you need a url. Do
     * not store the url in your database!
     */
    requestDevServer(options: {
        /**
         * @deprecated
         */
        repoUrl?: string;
        repoId?: string;
        repo?: string;
        baseId?: string;
        devCommand?: string;
    }): Promise<{
        mcpEphemeralUrl: any;
        ephemeralUrl: string;
        codeServerUrl: any;
        url: string;
        isNew: boolean;
        devCommandRunning: boolean;
        installCommandRunning: boolean;
    }>;
}

export { AccessLevel, CreateRepositoryResponseSuccess, CreatedToken, DeploymentSource, DescribePermissionResponseSuccess, FreestyleCloudstateDeployRequest, FreestyleCloudstateDeploySuccessResponse, FreestyleDeployWebConfiguration, FreestyleDeployWebSuccessResponseV2, FreestyleExecuteScriptParamsConfiguration, FreestyleExecuteScriptResultSuccess, FreestyleSandboxes, GitIdentity, GitTrigger, GitTriggerAction, HandleBackupCloudstateResponse, HandleCreateDomainVerificationResponse, HandleCreateGitTriggerResponse, HandleDeleteDomainVerificationResponse, HandleDeleteIdentityResponse, HandleDeleteRepoResponse, HandleGetExecuteRunResponse, HandleGetLogsResponse, HandleGrantPermissionResponse, HandleListDomainVerificationRequestsResponse, HandleListDomainsResponse, HandleListExecuteRunsResponse, HandleListGitTriggersResponse, HandleListRepositoriesResponse, HandleListWebDeploysResponse, HandleVerifyDomainError, HandleVerifyDomainResponse, HandleVerifyWildcardResponse, ListGitTokensResponseSuccess, ListPermissionResponseSuccess };
