/**
 * Identical to [`RepositoryInfo`], but with the permissions field added.
 */
type AccessibleRepository = {
    id: string;
    name?: (string) | null;
    accountId: string;
    permissions: AccessLevel;
    visibility: Visibility;
};
type AccessLevel = 'read' | 'write';
type AccessTokenInfo = {
    id: string;
};
type Behavior = 'regex' | 'exact';
/**
 * The encoding of a blob from the API. Always `base64`.
 */
type BlobEncoding = 'base64';
/**
 * Blob object
 */
type BlobObject = {
    /**
     * The content of the blob, base64 encoded.
     */
    content: string;
    /**
     * The encoding of the blob. Always `base64`.
     */
    encoding: BlobEncoding;
    /**
     * The object's hash.
     */
    sha: string;
};
/**
 * Commit object
 */
type CommitObject = {
    /**
     * The author of the commit
     */
    author: Signature;
    /**
     * The committer
     */
    committer: Signature;
    /**
     * The commit message
     */
    message: string;
    /**
     * The ID of the tree pointed to by this commit
     */
    tree: CommitTree;
    /**
     * Parent commit(s) of this commit
     */
    parents: Array<CommitParent>;
    /**
     * The commit's hash ID
     */
    sha: string;
};
type CommitParent = {
    /**
     * The commit's hash ID
     */
    sha: string;
};
type CommitTree = {
    /**
     * The tree's hash ID
     */
    sha: string;
};
type CreateDomainMappingRequest = {
    deploymentId: string;
};
type CreatedToken = {
    id: string;
    token: string;
};
type CreateRecordParams = {
    domain: string;
    record: DnsRecordData;
};
type CreateRepoRequest = {
    source?: (null | CreateRepoSource);
};
type CreateRepositoryRequest = {
    /**
     * This name is not visible to users, and is only accessible to you via API and in the
     * dashboard. Mostly useful for observability.
     */
    name?: (string) | null;
    public?: boolean;
    source?: CreateRepoSource;
};
type CreateRepositoryResponseSuccess = {
    repoId: string;
};
type CreateRepoSource = {
    url: string;
    branch?: (string) | null;
    depth?: (number) | null;
    type: 'git';
};
type type = 'git';
type CustomBuildOptions = {
    command?: (string) | null;
    envVars?: {
        [key: string]: (string);
    } | null;
    outDir?: (string) | null;
};
type DeploymentBuildOptions = CustomBuildOptions | boolean;
type DeploymentLogEntry = {
    deploymentId: string;
    accountId: string;
    provisionedAt: string;
    timeout: string;
    state: DeploymentState;
    deployedAt?: (string) | null;
    domains: Array<(string)>;
    envVars: {
        [key: string]: (string);
    };
};
type DeploymentSource = {
    files: {
        [key: string]: FreestyleFile;
    };
    kind: 'files';
} | {
    url: string;
    kind: 'tar';
} | {
    url: string;
    branch?: (string) | null;
    kind: 'git';
};
type kind = 'files';
type DeploymentState = 'provisioning' | 'deployed' | 'failed';
type DescribePermissionResponseSuccess = {
    identity: string;
    repo: string;
    accessLevel?: (null | AccessLevel);
};
type DevServer = {
    repoId: string;
    kind: 'repo';
};
type kind2 = 'repo';
type DevServerRequest = {
    devCommand?: (string) | null;
    preDevCommandOnce?: (string) | null;
    baseId?: (string) | null;
    envVars?: {
        [key: string]: (string);
    } | null;
    repoId?: (string) | null;
    /**
     * @deprecated
     */
    domain?: (string) | null;
    /**
     * @deprecated
     */
    repo?: (string) | null;
};
type DevServerStatusRequest = {
    devServer: DevServer;
};
type DnsRecord = {
    kind: DnsRecordKind;
    name: string;
    value: string;
    ttl: string;
    priority?: (number) | null;
    managed: boolean;
};
type DnsRecordData = {
    kind: DnsRecordKind;
    name: string;
    value: string;
    ttl?: (string) | null;
    priority?: (number) | null;
};
type DnsRecordKind = 'A' | 'AAAA' | 'CNAME' | 'TXT' | 'NS';
type DomainVerificationRequest = {
    id: string;
    domain: string;
    accountId: string;
    verificationCode: string;
    createdAt: number;
};
type ExecRequest = {
    devServer: DevServer;
    command: string;
    /**
     * Spawn this command as a background process and return immediately
     */
    background: boolean;
};
type ExecuteLogEntry = {
    deployment: string;
    accountId: string;
    provisionedAt: string;
    startedAt?: (string) | null;
    duration?: (string) | null;
    state: ExecuteRunState;
    envVars: {
        [key: string]: (string);
    };
};
type ExecuteRunInfo = {
    code: string;
    nodeModules: {
        [key: string]: (string);
    };
};
type ExecuteRunState = 'starting' | 'running' | 'complete';
type FileReadContent = {
    content: string;
    encoding: string;
    kind: 'file';
} | {
    files: Array<(string)>;
    kind: 'directory';
};
type kind3 = 'file';
type FreestyleCloudstateDeployConfiguration = {
    /**
     * ID of the project to deploy, if not provided will create a new project
     */
    domains?: Array<(string)> | null;
    /**
     * The environment variables that the cloudstate deploy can access
     */
    envVars?: {
        [key: string]: (string);
    };
    cloudstateDatabaseId?: (string) | null;
};
type FreestyleCloudstateDeployErrorResponse = {
    message: string;
};
type FreestyleCloudstateDeployRequest = {
    classes: string;
    config?: FreestyleCloudstateDeployConfiguration;
};
type FreestyleCloudstateDeploySuccessResponse = {
    deploymentId: string;
    cloudstateDatabaseId: string;
};
type FreestyleDeleteDomainVerificationRequest = {
    /**
     * The domain to create a verification code for
     */
    domain: string;
    /**
     * The verification code
     */
    verificationCode: string;
};
type FreestyleDeployWebConfiguration = {
    /**
     * The entrypoint file for the website
     */
    entrypoint?: (string) | null;
    /**
     * The custom domains for the website, eg. [\"subdomain.yourwebsite.com\"]. You may include a single *.style.dev domain here.
     */
    domains?: Array<(string)> | null;
    /**
     * Project ID was our original way of tracking deployments together, it is now deprecated and will be removed in the future. Please use the domains field to specify the domains for your project.
     * @deprecated
     */
    projectId?: (string) | null;
    /**
     * Node Modules to install for the website, a map of package names to versions, e.g. { \"express\": \"4.17.1\" }. If this and a package-lock.json are provided, the package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock is also provided, the versions here will override the versions in those lock files.
     */
    nodeModules?: {
        [key: string]: (string);
    } | null;
    /**
     * The environment variables that the website can access
     * e.g. { \"RESEND_API_KEY\": \"re_123456789\" }
     */
    envVars?: {
        [key: string]: (string);
    } | null;
    serverStartCheck?: boolean;
    networkPermissions?: Array<FreestyleNetworkPermission> | null;
    build?: (null | DeploymentBuildOptions);
    /**
     * Timeout for the deployment in seconds. If not provided, the default is 10 seconds.
     */
    timeout?: (number) | null;
};
type FreestyleDeployWebErrorResponse = {
    message: string;
};
type FreestyleDeployWebPayload = {
    /**
     * The files to deploy, a map of file paths to file contents, e.g. { \"index.js\": {\"content\": \"your main\", \"encoding\": \"utf-8\"}, \"file2.js\": {\"content\": \"your helper\" } }
     *
     * **Do not include node modules in this bundle, they will not work**. Instead, includes a package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock, the node modules for the project will be installed from that lock file, or use the node_modules field in the configuration to specify the node modules to install.
     */
    files: {
        [key: string]: FreestyleFile;
    };
    config?: FreestyleDeployWebConfiguration;
};
type FreestyleDeployWebPayloadV2 = {
    /**
     * The files to deploy, a map of file paths to file contents, e.g. { \"index.js\": {\"content\": \"your main\", \"encoding\": \"utf-8\"}, \"file2.js\": {\"content\": \"your helper\" } }
     *
     * **Do not include node modules in this bundle, they will not work**. Instead, includes a package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock, the node modules for the project will be installed from that lock file, or use the node_modules field in the configuration to specify the node modules to install.
     */
    source: DeploymentSource;
    config?: FreestyleDeployWebConfiguration;
};
type FreestyleDeployWebSuccessResponseV2 = {
    deploymentId: string;
    /**
     * @deprecated
     */
    projectId: string;
    domains?: Array<(string)> | null;
    /**
     * The entrypoint file for the website. If not specified we try to automatically detect it.
     */
    entrypoint: string;
};
type FreestyleDomainVerificationRequest = {
    /**
     * The domain to create a verification code for
     */
    domain: string;
};
type FreestyleExecuteScriptParams = {
    /**
     * The JavaScript or TypeScript script to execute
     */
    script: string;
    config?: FreestyleExecuteScriptParamsConfiguration;
};
type FreestyleExecuteScriptParamsConfiguration = {
    /**
     * The environment variables to set for the script
     */
    envVars?: {
        [key: string]: (string);
    };
    /**
     * The node modules to install for the script
     */
    nodeModules?: {
        [key: string]: (string);
    };
    /**
     * Tags for you to organize your scripts, useful for tracking what you're running
     */
    tags?: Array<(string)>;
    /**
     * The script timeout
     */
    timeout?: (string) | null;
    /**
     * If false, we'll not resolve peer dependencies for the packages given, this can speed up execute performance, but will break packages with peers unless the peers are manually specified.
     */
    peerDependencyResolution?: boolean;
    networkPermissions?: Array<FreestyleNetworkPermission> | null;
    /**
     * These headers will be added to every fetch request made through the script
     */
    customHeaders?: {
        [key: string]: (string);
    };
    /**
     * Proxy all outgoing requests through this URL
     */
    proxy?: (string) | null;
};
type FreestyleExecuteScriptResultSuccess = {
    /**
     * The return value of the default export of the script
     */
    result: unknown;
    logs: Array<FreestyleJavaScriptLog>;
};
type FreestyleFile = {
    /**
     * The content of the file
     */
    content: string;
    /**
     * The encoding of the file. Either **utf-8** or **base64**
     */
    encoding?: string;
};
type FreestyleGetLogsResponse = {
    logs: Array<FreestyleLogResponseObject>;
};
type FreestyleJavaScriptLog = {
    /**
     * The log message
     */
    message: string;
    /**
     * The log level
     */
    type: string;
};
type FreestyleLogResponseObject = {
    message: string;
    timestamp: string;
};
type FreestyleNetworkPermission = (NetworkPermissionData & {
    action: 'allow';
}) | (NetworkPermissionData & {
    action: 'deny';
});
type action = 'allow';
/**
 * Verify a domain verification request, can either be done for a domain, or for a specific request
 */
type FreestyleVerifyDomainRequest = {
    domain: string;
} | {
    id: string;
};
type GitCommitPushRequest = {
    devServer: DevServer;
    message: string;
};
type GitIdentity = {
    id: string;
    managed: boolean;
};
type GitRepositoryTrigger = {
    repositoryId: string;
    trigger: ({
        branches?: Array<(string)> | null;
        globs?: Array<(string)> | null;
        event: 'push';
    });
    action: ({
        endpoint: string;
        action: 'webhook';
    });
    managed: boolean;
    id: string;
    createdAt: number;
};
type event = 'push';
type action2 = 'webhook';
type GitTrigger = {
    branches?: Array<(string)> | null;
    globs?: Array<(string)> | null;
    event: 'push';
};
type GitTriggerAction = {
    endpoint: string;
    action: 'webhook';
};
type GrantPermissionRequest = {
    permission: AccessLevel;
};
type InternalServerError = string;
type ListGitTokensResponseSuccess = {
    tokens: Array<AccessTokenInfo>;
};
type ListPermissionResponseSuccess = {
    repositories: Array<AccessibleRepository>;
};
type ListRecordsResponse = {
    records: Array<DnsRecord>;
};
type NetworkPermissionData = {
    query: string;
    behavior?: Behavior;
};
type ReadFileRequest = {
    devServer: DevServer;
    encoding?: string;
};
type RepositoryInfo = {
    id: string;
    name?: (string) | null;
    accountId: string;
    visibility: Visibility;
};
type RevokeGitTokenRequest = {
    tokenId: string;
};
type Signature = {
    /**
     * The date marker for this signature
     */
    date: string;
    name: string;
    email: string;
};
/**
 * Tag object
 */
type TagObject = {
    /**
     * The tag name
     */
    name: string;
    tagger?: (null | Signature);
    /**
     * The tag message
     */
    message?: (string) | null;
    /**
     * The object this tag points to
     */
    target: TagTarget;
    /**
     * The tag's hash ID
     */
    sha: string;
};
type TagTarget = {
    /**
     * The target object's hash ID
     */
    sha: string;
};
type TreeEntry = {
    path: string;
    sha: string;
    type: 'blob';
} | {
    path: string;
    sha: string;
    type: 'tree';
};
type type2 = 'blob';
/**
 * Tree object
 */
type TreeObject = {
    /**
     * The tree's entries
     */
    tree: Array<TreeEntry>;
    /**
     * The tree's hash ID
     */
    sha: string;
};
type UpdatePermissionRequest = {
    permission: AccessLevel;
};
type Visibility = 'public' | 'private';
type WriteFileRequest = {
    devServer: DevServer;
    content: string;
    encoding?: string;
};
type HandleDeployCloudstateData = {
    body: FreestyleCloudstateDeployRequest;
};
type HandleDeployCloudstateResponse = (FreestyleCloudstateDeploySuccessResponse);
type HandleDeployCloudstateError = (FreestyleCloudstateDeployErrorResponse);
type HandleBackupCloudstateData = {
    path: {
        id: string;
    };
};
type HandleBackupCloudstateResponse = (Array<(number)>);
type HandleBackupCloudstateError = (unknown);
type HandleListRecordsData = {
    query: {
        domain: string;
    };
};
type HandleListRecordsResponse = (ListRecordsResponse);
type HandleListRecordsError = ({
    message: string;
});
type HandleCreateRecordData = {
    body: CreateRecordParams;
};
type HandleCreateRecordResponse = ({
    record: DnsRecord;
});
type HandleCreateRecordError = ({
    message: string;
});
type HandleDeleteRecordData = {
    query: {
        domain: string;
        record: DnsRecord;
    };
};
type HandleDeleteRecordResponse = ({
    message: string;
});
type HandleDeleteRecordError = ({
    message: string;
});
type HandleVerifyWildcardData = {
    path: {
        domain: string;
    };
};
type HandleVerifyWildcardResponse = ({
    domain: string;
});
type HandleVerifyWildcardError = ({
    message: string;
});
type HandleListDomainsResponse = (Array<{
    domain: string;
    createdAt: number;
}>);
type HandleListDomainsError = ({
    message: string;
});
type HandleInsertDomainMappingData = {
    body: CreateDomainMappingRequest;
    path: {
        domain: string;
    };
};
type HandleInsertDomainMappingResponse = (unknown);
type HandleInsertDomainMappingError = ({
    message: string;
});
type HandleDeleteDomainMappingData = {
    path: {
        domain: string;
    };
};
type HandleDeleteDomainMappingResponse = (unknown);
type HandleDeleteDomainMappingError = ({
    message: string;
});
type HandleListDomainVerificationRequestsResponse = (Array<{
    verificationCode: string;
    domain: string;
    createdAt: number;
}>);
type HandleListDomainVerificationRequestsError = ({
    message: string;
});
type HandleVerifyDomainData = {
    body: FreestyleVerifyDomainRequest;
};
type HandleVerifyDomainResponse = ({
    domain: string;
});
type HandleVerifyDomainError = ({
    message: string;
});
type HandleCreateDomainVerificationData = {
    body: FreestyleDomainVerificationRequest;
};
type HandleCreateDomainVerificationResponse = (DomainVerificationRequest);
type HandleCreateDomainVerificationError = ({
    message: string;
});
type HandleDeleteDomainVerificationData = {
    body: FreestyleDeleteDomainVerificationRequest;
};
type HandleDeleteDomainVerificationResponse = ({
    verificationCode: string;
    domain: string;
});
type HandleDeleteDomainVerificationError = ({
    message: string;
});
type HandleEphemeralDevServerData = {
    body: DevServerRequest;
};
type HandleEphemeralDevServerResponse = ({
    /**
     * @deprecated
     */
    url: string;
    isNew: boolean;
    devCommandRunning: boolean;
    installCommandRunning: boolean;
    mcpEphemeralUrl?: (string) | null;
    ephemeralUrl?: (string) | null;
});
type HandleEphemeralDevServerError = (InternalServerError);
type HandleExecOnEphemeralDevServerData = {
    body: ExecRequest;
};
type HandleExecOnEphemeralDevServerResponse = ({
    id: string;
    isNew: boolean;
    stdout?: Array<(string)> | null;
    stderr?: Array<(string)> | null;
});
type HandleExecOnEphemeralDevServerError = (InternalServerError);
type HandleWriteFileFromEphemeralDevServerData = {
    body: WriteFileRequest;
};
type HandleWriteFileFromEphemeralDevServerResponse = ({
    id: string;
    isNew: boolean;
});
type HandleWriteFileFromEphemeralDevServerError = (InternalServerError);
type HandleReadFileFromEphemeralDevServerData = {
    body: ReadFileRequest;
};
type HandleReadFileFromEphemeralDevServerResponse = ({
    id: string;
    isNew: boolean;
    content?: (null | FileReadContent);
});
type HandleReadFileFromEphemeralDevServerError = (InternalServerError);
type HandleGitCommitPushData = {
    body: GitCommitPushRequest;
};
type HandleGitCommitPushResponse = ({
    id: string;
    isNew: boolean;
});
type HandleGitCommitPushError = (InternalServerError);
type HandleDevServerStatusData = {
    body: DevServerStatusRequest;
};
type HandleDevServerStatusResponse = ({
    installing: boolean;
    devRunning: boolean;
});
type HandleDevServerStatusError = (InternalServerError);
type HandleListExecuteRunsData = {
    query?: {
        limit?: (number) | null;
        offset?: (number) | null;
    };
};
type HandleListExecuteRunsResponse = ({
    entries: Array<ExecuteLogEntry>;
    total: number;
    offset: number;
});
type HandleListExecuteRunsError = ({
    message: string;
});
type HandleGetExecuteRunData = {
    path: {
        deployment: string;
    };
};
type HandleGetExecuteRunResponse = ({
    metadata: ExecuteLogEntry;
    code: ExecuteRunInfo;
});
type HandleGetExecuteRunError = ({
    message: string;
});
type HandleExecuteScriptData = {
    body: FreestyleExecuteScriptParams;
};
type HandleExecuteScriptResponse = ({
    /**
     * The return value of the default export of the script
     */
    result: unknown;
    logs: Array<FreestyleJavaScriptLog>;
});
type HandleExecuteScriptError = ({
    error: string;
    logs?: Array<FreestyleJavaScriptLog> | null;
});
type HandleListIdentitiesData = {
    query?: {
        includeManaged?: (boolean) | null;
        limit?: (number) | null;
        offset?: (number) | null;
    };
};
type HandleListIdentitiesResponse = ({
    identities: Array<GitIdentity>;
    offset: number;
    total: number;
});
type HandleListIdentitiesError = ({
    message: string;
});
type HandleCreateIdentityResponse = (GitIdentity);
type HandleCreateIdentityError = ({
    message: string;
});
type HandleDeleteIdentityData = {
    path: {
        identity: string;
    };
};
type HandleDeleteIdentityResponse = ({
    [key: string]: unknown;
});
type HandleDeleteIdentityError = ({
    message: string;
});
type HandleListPermissionsData = {
    path: {
        identity: string;
    };
    query?: {
        /**
         * Maximum number of repositories to return
         */
        limit?: number;
        /**
         * Offset for the list of repositories
         */
        offset?: number;
    };
};
type HandleListPermissionsResponse = (ListPermissionResponseSuccess);
type HandleListPermissionsError = ({
    message: string;
});
type HandleDescribePermissionData = {
    path: {
        identity: string;
        repo: string;
    };
};
type HandleDescribePermissionResponse = (DescribePermissionResponseSuccess);
type HandleDescribePermissionError = ({
    message: string;
});
type HandleGrantPermissionData = {
    body: GrantPermissionRequest;
    path: {
        identity: string;
        repo: string;
    };
};
type HandleGrantPermissionResponse = ({
    [key: string]: unknown;
});
type HandleGrantPermissionError = ({
    message: string;
});
type HandleRevokePermissionData = {
    path: {
        identity: string;
        repo: string;
    };
};
type HandleRevokePermissionResponse = ({
    [key: string]: unknown;
});
type HandleRevokePermissionError = ({
    message: string;
});
type HandleUpdatePermissionData = {
    body: UpdatePermissionRequest;
    path: {
        identity: string;
        repo: string;
    };
};
type HandleUpdatePermissionResponse = ({
    [key: string]: unknown;
});
type HandleUpdatePermissionError = ({
    message: string;
});
type HandleListGitTokensData = {
    path: {
        identity: string;
    };
};
type HandleListGitTokensResponse = (ListGitTokensResponseSuccess);
type HandleListGitTokensError = ({
    message: string;
});
type HandleCreateGitTokenData = {
    path: {
        identity: string;
    };
};
type HandleCreateGitTokenResponse = (CreatedToken);
type HandleCreateGitTokenError = ({
    message: string;
});
type HandleRevokeGitTokenData = {
    body: RevokeGitTokenRequest;
    path: {
        identity: string;
    };
};
type HandleRevokeGitTokenResponse = ({
    [key: string]: unknown;
});
type HandleRevokeGitTokenError = ({
    message: string;
});
type HandleListRepositoriesData = {
    query?: {
        /**
         * Maximum number of repositories to return
         */
        limit?: number;
        /**
         * Offset for the list of repositories
         */
        offset?: number;
    };
};
type HandleListRepositoriesResponse = ({
    repositories: Array<RepositoryInfo>;
    offset: number;
});
type HandleListRepositoriesError = ({
    message: string;
});
type HandleCreateRepoData = {
    body: {
        /**
         * This name is not visible to users, and is only accessible to you via API and in the
         * dashboard. Mostly useful for observability.
         */
        name?: (string) | null;
        public?: boolean;
        source?: CreateRepoSource;
    };
};
type HandleCreateRepoResponse = (CreateRepositoryResponseSuccess);
type HandleCreateRepoError = ({
    message: string;
});
type HandleGetBlobData = {
    path: {
        /**
         * The blob hash
         */
        hash: string;
        /**
         * The repository ID
         */
        repo_id: string;
    };
};
type HandleGetBlobResponse = (BlobObject);
type HandleGetBlobError = ({
    message: string;
});
type HandleGetCommitData = {
    path: {
        /**
         * The commit hash
         */
        hash: string;
        /**
         * The repository ID
         */
        repo_id: string;
    };
};
type HandleGetCommitResponse = (CommitObject);
type HandleGetCommitError = ({
    message: string;
});
type HandleGetTagData = {
    path: {
        /**
         * The tag hash
         */
        hash: string;
        /**
         * The repository ID
         */
        repo_id: string;
    };
};
type HandleGetTagResponse = (TagObject);
type HandleGetTagError = ({
    message: string;
});
type HandleGetTreeData = {
    path: {
        /**
         * The tree hash
         */
        hash: string;
        /**
         * The repository ID
         */
        repo_id: string;
    };
};
type HandleGetTreeResponse = (TreeObject);
type HandleGetTreeError = ({
    message: string;
});
type HandleDeleteRepoData = {
    path: {
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleDeleteRepoResponse = ({
    [key: string]: unknown;
});
type HandleDeleteRepoError = ({
    message: string;
} | {
    [key: string]: unknown;
});
type HandleListGitTriggersData = {
    path: {
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleListGitTriggersResponse = ({
    triggers: Array<GitRepositoryTrigger>;
});
type HandleListGitTriggersError = ({
    message: string;
});
type HandleCreateGitTriggerData = {
    body: {
        trigger: ({
            branches?: Array<(string)> | null;
            globs?: Array<(string)> | null;
            event: 'push';
        });
        action: ({
            endpoint: string;
            action: 'webhook';
        });
    };
    path: {
        /**
         * The repository id
         */
        repo: string;
    };
};
type HandleCreateGitTriggerResponse = ({
    triggerId: string;
});
type HandleCreateGitTriggerError = ({
    message: string;
});
type HandleDeleteGitTriggerData = {
    path: {
        /**
         * The trigger id
         */
        trigger: string;
    };
};
type HandleDeleteGitTriggerResponse = ({
    [key: string]: unknown;
});
type HandleDeleteGitTriggerError = ({
    message: string;
} | {
    [key: string]: unknown;
});
type HandleGetLogsData = {
    query?: {
        deploymentId?: (string) | null;
        domain?: (string) | null;
    };
};
type HandleGetLogsResponse = (FreestyleGetLogsResponse);
type HandleGetLogsError = unknown;
type HandleDeployWebData = {
    body: FreestyleDeployWebPayload;
};
type HandleDeployWebResponse = (FreestyleDeployWebSuccessResponseV2);
type HandleDeployWebError = (FreestyleDeployWebErrorResponse);
type HandleDeployWebV2Data = {
    body: FreestyleDeployWebPayloadV2;
};
type HandleDeployWebV2Response = (FreestyleDeployWebSuccessResponseV2);
type HandleDeployWebV2Error = (FreestyleDeployWebErrorResponse);
type HandleListWebDeploysData = {
    query: {
        /**
         * Maximum number of repositories to return
         */
        limit: number;
        /**
         * Offset for the list of repositories
         */
        offset: number;
    };
};
type HandleListWebDeploysResponse = ({
    entries: Array<DeploymentLogEntry>;
    total: number;
    offset: number;
});
type HandleListWebDeploysError = ({
    message: string;
});
type HandleGetWebDeployDetailsData = {
    path: {
        deployment_id: string;
    };
};

export type { DevServer as $, AccessLevel as A, HandleCreateGitTriggerResponse as B, CreateRepositoryResponseSuccess as C, DeploymentSource as D, DeploymentBuildOptions as E, FreestyleExecuteScriptParamsConfiguration as F, GitIdentity as G, HandleBackupCloudstateResponse as H, AccessibleRepository as I, AccessTokenInfo as J, Behavior as K, ListPermissionResponseSuccess as L, BlobEncoding as M, BlobObject as N, CommitObject as O, CommitParent as P, CommitTree as Q, CreateDomainMappingRequest as R, CreateRecordParams as S, CreateRepoRequest as T, CreateRepositoryRequest as U, CreateRepoSource as V, type as W, CustomBuildOptions as X, DeploymentLogEntry as Y, kind as Z, DeploymentState as _, FreestyleExecuteScriptResultSuccess as a, HandleVerifyWildcardError as a$, kind2 as a0, DevServerRequest as a1, DevServerStatusRequest as a2, DnsRecord as a3, DnsRecordData as a4, DnsRecordKind as a5, DomainVerificationRequest as a6, ExecRequest as a7, ExecuteLogEntry as a8, ExecuteRunInfo as a9, ReadFileRequest as aA, RepositoryInfo as aB, RevokeGitTokenRequest as aC, Signature as aD, TagObject as aE, TagTarget as aF, TreeEntry as aG, type2 as aH, TreeObject as aI, UpdatePermissionRequest as aJ, Visibility as aK, WriteFileRequest as aL, HandleDeployCloudstateData as aM, HandleDeployCloudstateResponse as aN, HandleDeployCloudstateError as aO, HandleBackupCloudstateData as aP, HandleBackupCloudstateError as aQ, HandleListRecordsData as aR, HandleListRecordsResponse as aS, HandleListRecordsError as aT, HandleCreateRecordData as aU, HandleCreateRecordResponse as aV, HandleCreateRecordError as aW, HandleDeleteRecordData as aX, HandleDeleteRecordResponse as aY, HandleDeleteRecordError as aZ, HandleVerifyWildcardData as a_, ExecuteRunState as aa, FileReadContent as ab, kind3 as ac, FreestyleCloudstateDeployConfiguration as ad, FreestyleCloudstateDeployErrorResponse as ae, FreestyleDeleteDomainVerificationRequest as af, FreestyleDeployWebErrorResponse as ag, FreestyleDeployWebPayload as ah, FreestyleDeployWebPayloadV2 as ai, FreestyleDomainVerificationRequest as aj, FreestyleExecuteScriptParams as ak, FreestyleFile as al, FreestyleGetLogsResponse as am, FreestyleJavaScriptLog as an, FreestyleLogResponseObject as ao, FreestyleNetworkPermission as ap, action as aq, FreestyleVerifyDomainRequest as ar, GitCommitPushRequest as as, GitRepositoryTrigger as at, event as au, action2 as av, GrantPermissionRequest as aw, InternalServerError as ax, ListRecordsResponse as ay, NetworkPermissionData as az, FreestyleDeployWebConfiguration as b, HandleCreateGitTokenResponse as b$, HandleListDomainsError as b0, HandleInsertDomainMappingData as b1, HandleInsertDomainMappingResponse as b2, HandleInsertDomainMappingError as b3, HandleDeleteDomainMappingData as b4, HandleDeleteDomainMappingResponse as b5, HandleDeleteDomainMappingError as b6, HandleListDomainVerificationRequestsError as b7, HandleVerifyDomainData as b8, HandleCreateDomainVerificationData as b9, HandleExecuteScriptResponse as bA, HandleExecuteScriptError as bB, HandleListIdentitiesData as bC, HandleListIdentitiesResponse as bD, HandleListIdentitiesError as bE, HandleCreateIdentityResponse as bF, HandleCreateIdentityError as bG, HandleDeleteIdentityData as bH, HandleDeleteIdentityError as bI, HandleListPermissionsData as bJ, HandleListPermissionsResponse as bK, HandleListPermissionsError as bL, HandleDescribePermissionData as bM, HandleDescribePermissionResponse as bN, HandleDescribePermissionError as bO, HandleGrantPermissionData as bP, HandleGrantPermissionError as bQ, HandleRevokePermissionData as bR, HandleRevokePermissionResponse as bS, HandleRevokePermissionError as bT, HandleUpdatePermissionData as bU, HandleUpdatePermissionResponse as bV, HandleUpdatePermissionError as bW, HandleListGitTokensData as bX, HandleListGitTokensResponse as bY, HandleListGitTokensError as bZ, HandleCreateGitTokenData as b_, HandleCreateDomainVerificationError as ba, HandleDeleteDomainVerificationData as bb, HandleDeleteDomainVerificationError as bc, HandleEphemeralDevServerData as bd, HandleEphemeralDevServerResponse as be, HandleEphemeralDevServerError as bf, HandleExecOnEphemeralDevServerData as bg, HandleExecOnEphemeralDevServerResponse as bh, HandleExecOnEphemeralDevServerError as bi, HandleWriteFileFromEphemeralDevServerData as bj, HandleWriteFileFromEphemeralDevServerResponse as bk, HandleWriteFileFromEphemeralDevServerError as bl, HandleReadFileFromEphemeralDevServerData as bm, HandleReadFileFromEphemeralDevServerResponse as bn, HandleReadFileFromEphemeralDevServerError as bo, HandleGitCommitPushData as bp, HandleGitCommitPushResponse as bq, HandleGitCommitPushError as br, HandleDevServerStatusData as bs, HandleDevServerStatusResponse as bt, HandleDevServerStatusError as bu, HandleListExecuteRunsData as bv, HandleListExecuteRunsError as bw, HandleGetExecuteRunData as bx, HandleGetExecuteRunError as by, HandleExecuteScriptData as bz, FreestyleDeployWebSuccessResponseV2 as c, HandleCreateGitTokenError as c0, HandleRevokeGitTokenData as c1, HandleRevokeGitTokenResponse as c2, HandleRevokeGitTokenError as c3, HandleListRepositoriesData as c4, HandleListRepositoriesError as c5, HandleCreateRepoData as c6, HandleCreateRepoResponse as c7, HandleCreateRepoError as c8, HandleGetBlobData as c9, HandleDeployWebV2Response as cA, HandleDeployWebV2Error as cB, HandleListWebDeploysData as cC, HandleListWebDeploysError as cD, HandleGetWebDeployDetailsData as cE, HandleGetBlobResponse as ca, HandleGetBlobError as cb, HandleGetCommitData as cc, HandleGetCommitResponse as cd, HandleGetCommitError as ce, HandleGetTagData as cf, HandleGetTagResponse as cg, HandleGetTagError as ch, HandleGetTreeData as ci, HandleGetTreeResponse as cj, HandleGetTreeError as ck, HandleDeleteRepoData as cl, HandleDeleteRepoError as cm, HandleListGitTriggersData as cn, HandleListGitTriggersError as co, HandleCreateGitTriggerData as cp, HandleCreateGitTriggerError as cq, HandleDeleteGitTriggerData as cr, HandleDeleteGitTriggerResponse as cs, HandleDeleteGitTriggerError as ct, HandleGetLogsData as cu, HandleGetLogsError as cv, HandleDeployWebData as cw, HandleDeployWebResponse as cx, HandleDeployWebError as cy, HandleDeployWebV2Data as cz, FreestyleCloudstateDeployRequest as d, FreestyleCloudstateDeploySuccessResponse as e, HandleGetLogsResponse as f, HandleCreateDomainVerificationResponse as g, HandleVerifyDomainResponse as h, HandleVerifyDomainError as i, HandleListDomainsResponse as j, HandleListDomainVerificationRequestsResponse as k, HandleDeleteDomainVerificationResponse as l, HandleListWebDeploysResponse as m, HandleListExecuteRunsResponse as n, HandleGetExecuteRunResponse as o, HandleVerifyWildcardResponse as p, HandleListRepositoriesResponse as q, HandleDeleteRepoResponse as r, HandleDeleteIdentityResponse as s, HandleGrantPermissionResponse as t, DescribePermissionResponseSuccess as u, CreatedToken as v, ListGitTokensResponseSuccess as w, HandleListGitTriggersResponse as x, GitTrigger as y, GitTriggerAction as z };
